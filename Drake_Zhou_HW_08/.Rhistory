viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_weak$var_matrix))
post_sd
viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_weak$var_matrix)[1:ncol(X03)])
post_sd
viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_weak$var_matrix)[1:ncol(X03)])
class(post_sd)
viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_weak$var_matrix))
class(post_sd)
viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode[1:ncol(X03)]
post_sd <- diag(laplace_03_weak$var_matrix)
class(post_sd)
viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode
post_sd <- diag(laplace_03_weak$var_matrix)
length(post_means)
length(post_sd)
#viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode
post_sd <- sqrt(diag(laplace_03_weak$var_matrix))
length(post_means)
length(post_sd)
#viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode
post_sd <- sqrt(diag(laplace_03_weak$var_matrix))
length(post_means)
length(post_sd)
class(post_means)
#viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_weak$var_matrix))
length(post_means)
length(post_sd)
class(post_means)
#viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_weak$var_matrix)[1:ncol(X03)])
length(post_means)
length(post_sd)
class(post_means)
#viz_post_coefs(post_means, post_sd, colnames(info_03_weak$design_matrix))
### make the posterior coefficient visualization for model 3
post_means <- laplace_03_weak$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_weak$var_matrix)[1:ncol(X03)])
viz_post_coefs(post_means, post_sd, colnames(X03))
### make the posterior coefficient visualization for model 6
post_means <- laplace_06_weak$mode[1:ncol(X06)]
post_sd <- sqrt(diag(laplace_06_weak$var_matrix)[1:ncol(X06)])
viz_post_coefs(post_means, post_sd, colnames(X06))
### add more code chunks if you like
bf <- exp(laplace_03_weak$log_evidence) / exp(laplace_06_weak)
### add more code chunks if you like
bf <- exp(laplace_03_weak$log_evidence) / exp(laplace_06_weak$log_evidence)
### add more code chunks if you like
bf <- exp(laplace_03_weak$log_evidence) / exp(laplace_06_weak$log_evidence)
bf
info_03_strong <- list(
yobs = df$y,
design_matrix = X03,
mu_beta = 0,
tau_beta = 1,
sigma_rate = 1
)
info_06_strong <- list(
yobs = df$y,
design_matrix = X06,
mu_beta = 0,
tau_beta = 1,
sigma_rate = 1
)
### add more code chunks if you like
my_laplace(rep(0,ncol(X03)), lm_logpost, info_03_strong)
### add more code chunks if you like
my_laplace(rep(0,ncol(X03)+1), lm_logpost, info_03_strong)
### add more code chunks if you like
laplace_03_strong <- my_laplace(rep(0,ncol(X03)+1), lm_logpost, info_03_strong)
### add more code chunks if you like
laplace_03_strong <- my_laplace(rep(0,ncol(X03)+1), lm_logpost, info_03_strong)
laplace_06_strong <- my_laplace(rep(0,ncol(X06)+1), lm_logpost, info_06_strong)
### add more code chunks if you like
post_means <- laplace_03_strong$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_strong$var_matrix)[1:ncol(X03)])
viz_post_coefs(post_means, post_sd, colnames(X03))
### add more code chunks if you like
post_means <- laplace_03_strong$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_strong$var_matrix)[1:ncol(X03)])
viz_post_coefs(post_means, post_sd, colnames(X03))
post_means <- laplace_06_strong$mode[1:ncol(X06)]
post_sd <- sqrt(diag(laplace_06_strong$var_matrix)[1:ncol(X06)])
viz_post_coefs(post_means, post_sd, colnames(X06))
### add more code chunks if you like
post_means <- laplace_03_strong$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_strong$var_matrix)[1:ncol(X03)])
viz_post_coefs(post_means, post_sd, colnames(X03))
post_means <- laplace_06_strong$mode[1:ncol(X06)]
post_sd <- sqrt(diag(laplace_06_strong$var_matrix)[1:ncol(X06)])
viz_post_coefs(post_means, post_sd, colnames(X06))
### add more code chunks if you like
laplace_03_strong <- my_laplace(rep(0,ncol(X03)+1), lm_logpost, info_03_strong)
laplace_03_strong$converge
laplace_06_strong <- my_laplace(rep(0,ncol(X06)+1), lm_logpost, info_06_strong)
laplace_06_strong$converge
info_03_very_strong <- list(
yobs = db$y,
design_matrix = X03,
mu_beta = 0,
tau_beta = 1/50,
sigma_rate = 1
)
info_03_very_strong <- list(
yobs = df$y,
design_matrix = X03,
mu_beta = 0,
tau_beta = 1/50,
sigma_rate = 1
)
info_06_very_strong <- list(
yobs = df$y,
design_matrix = X06,
mu_beta = 0,
tau_beta = 1/50,
sigma_rate = 1
)
### add more code chunks if you like
laplace_03_very_strong <- my_laplace(rep(0, ncol(X03)+1), lm_logpost, info_03_very_strong)
### add more code chunks if you like
laplace_03_very_strong <- my_laplace(rep(0, ncol(X03)+1), lm_logpost, info_03_very_strong)
laplace_03_very_strong$converge
### add more code chunks if you like
laplace_03_very_strong <- my_laplace(rep(0, ncol(X03)+1), lm_logpost, info_03_very_strong)
laplace_03_very_strong$converge
laplace_06_very_strong <- my_laplace(rep(0, ncol(X06)+1), lm_logpost, info_06_very_strong)
laplace_06_very_strong$coverge
info_03_very_strong <- list(
yobs = df$y,
design_matrix = X03,
mu_beta = 0,
tau_beta = 1/50,
sigma_rate = 1
)
info_06_very_strong <- list(
yobs = df$y,
design_matrix = X06,
mu_beta = 0,
tau_beta = 1/50,
sigma_rate = 1
)
### add more code chunks if you like
laplace_03_very_strong <- my_laplace(rep(0, ncol(X03)+1), lm_logpost, info_03_very_strong)
laplace_03_very_strong$converge
laplace_06_very_strong <- my_laplace(rep(0, ncol(X06)+1), lm_logpost, info_06_very_strong)
laplace_06_very_strong$coverge
### add more code chunks if you like
laplace_03_very_strong <- my_laplace(rep(0, ncol(X03)+1), lm_logpost, info_03_very_strong)
laplace_03_very_strong$converge
laplace_06_very_strong <- my_laplace(rep(0, ncol(X06)+1), lm_logpost, info_06_very_strong)
laplace_06_very_strong$converge
### mod03_strong
post_means <- laplace_03_very_strong$mode[1:ncol(X03)]
post_sd <- sqrt(diag(laplace_03_very_strong$var_matrix)[1:ncol(X03)])
viz_post_coefs(post_means, post_sd, colnames(X03))
### mod06_strong
post_means <- laplace_06_very_strong$mode[1:ncol(X06)]
post_sd <- sqrt(diag(laplace_06_very_strong$var_matrix)[1:ncol(X06)])
viz_post_coefs(post_means, post_sd, colnames(X06))
### add more code chunks if you like
bf_strong = exp(laplace_03_strong$log_evidence) / exp(laplace_06_strong$log_evidence)
bf_very_strong = exp(laplace_03_very_strong$log_evidence) / exp(laplace_06_very_strong$log_evidence)
### add more code chunks if you like
bf_strong = exp(laplace_03_strong$log_evidence) / exp(laplace_06_strong$log_evidence)
bf_very_strong = exp(laplace_03_very_strong$log_evidence) / exp(laplace_06_very_strong$log_evidence)
bf_strong
bf_very_strong
generate_lm_post_samples <- function(mvn_result, length_beta, num_samples)
{
MASS::mvrnorm(n = num_samples,
mu = mvn_result$mode,
Sigma = mvn_result$var_matrix) %>%
as.data.frame() %>% tibble::as_tibble() %>%
purrr::set_names(c(sprintf("beta_%02d", 0:(length_beta-1)), "varphi")) %>%
mutate(sigma = exp(varphi))
}
?as.matrix
?rnorm
?matrix
post_lm_pred_samples <- function(Xnew, Bmat, sigma_vector)
{
# number of new prediction locations
M <- nrow(Xnew)
# number of posterior samples
S <- nrow(Bmat)
# matrix of linear predictors
Umat <- Xnew %*% t(Bmat)
# assmeble matrix of sigma samples, set the number of rows
Rmat <- matrix(rep(sigma_vector, M), M, byrow = TRUE)
# generate standard normal and assemble into matrix
# set the number of rows
Zmat <- matrix(rnorm(M*S), M, byrow = TRUE)
# calculate the random observation predictions
Ymat <- Umat + Zmat %*% Rmat
# package together
list(Umat = Umat, Ymat = Ymat)
}
make_post_lm_pred <- function(Xnew, post)
{
Bmat <- post %>% select(starts_with("beta_")) %>% as.matrix()
sigma_vector <- post %>% pull(sigma)
post_lm_pred_samples(Xnew, Bmat, sigma_vector)
}
summarize_lm_pred_from_laplace <- function(mvn_result, Xtest, num_samples)
{
# generate posterior samples of the beta parameters
post <- generate_lm_post_samples(mvn_result, ncol(Xtest), num_samples)
# make posterior predictions on the test set
pred_test <- make_post_lm_pred(Xtest, post)
# calculate summary statistics on the predicted mean and response
# summarize over the posterior samples
# posterior mean, should you summarize along rows (rowMeans) or
# summarize down columns (colMeans) ???
mu_avg <- rowMeans(pred_test$Umat)
y_avg <- rowMeans(pred_test$Ymat)
# posterior quantiles for the middle 95% uncertainty intervals
mu_lwr <- apply(pred_test$Umat, 1, stats::quantile, probs = 0.025)
mu_upr <- apply(pred_test$Umat, 1, stats::quantile, probs = 0.975)
y_lwr <- apply(pred_test$Ymat, 1, stats::quantile, probs = 0.025)
y_upr <- apply(pred_test$Ymat, 1, stats::quantile, probs = 0.975)
# book keeping
tibble::tibble(
mu_avg = mu_avg,
mu_lwr = mu_lwr,
mu_upr = mu_upr,
y_avg = y_avg,
y_lwr = y_lwr,
y_upr = y_upr
) %>%
tibble::rowid_to_column("pred_id")
}
### add as many code chunks as you'd like
X03_test <- model.matrix(y ~ (x1 + I(x1^2))*(x2 + I(x2^2)), data = viz_grid )
### add as many code chunks as you'd like
X03_test <- model.matrix( ~ (x1 + I(x1^2))*(x2 + I(x2^2)), data = viz_grid )
post_pred_summary_viz_03_weak <- summarize_lm_pred_from_laplace(laplace_03_weak, X03_test, 5000)
post_lm_pred_samples <- function(Xnew, Bmat, sigma_vector)
{
# number of new prediction locations
M <- nrow(Xnew)
# number of posterior samples
S <- nrow(Bmat)
# matrix of linear predictors
Umat <- Xnew %*% t(Bmat)
# assmeble matrix of sigma samples, set the number of rows
Rmat <- matrix(rep(sigma_vector, M), M, byrow = TRUE)
# generate standard normal and assemble into matrix
# set the number of rows
Zmat <- matrix(rnorm(M*S), M, byrow = TRUE)
# calculate the random observation predictions
Ymat <- Umat + Zmat * Rmat
# package together
list(Umat = Umat, Ymat = Ymat)
}
make_post_lm_pred <- function(Xnew, post)
{
Bmat <- post %>% select(starts_with("beta_")) %>% as.matrix()
sigma_vector <- post %>% pull(sigma)
post_lm_pred_samples(Xnew, Bmat, sigma_vector)
}
summarize_lm_pred_from_laplace <- function(mvn_result, Xtest, num_samples)
{
# generate posterior samples of the beta parameters
post <- generate_lm_post_samples(mvn_result, ncol(Xtest), num_samples)
# make posterior predictions on the test set
pred_test <- make_post_lm_pred(Xtest, post)
# calculate summary statistics on the predicted mean and response
# summarize over the posterior samples
# posterior mean, should you summarize along rows (rowMeans) or
# summarize down columns (colMeans) ???
mu_avg <- rowMeans(pred_test$Umat)
y_avg <- rowMeans(pred_test$Ymat)
# posterior quantiles for the middle 95% uncertainty intervals
mu_lwr <- apply(pred_test$Umat, 1, stats::quantile, probs = 0.025)
mu_upr <- apply(pred_test$Umat, 1, stats::quantile, probs = 0.975)
y_lwr <- apply(pred_test$Ymat, 1, stats::quantile, probs = 0.025)
y_upr <- apply(pred_test$Ymat, 1, stats::quantile, probs = 0.975)
# book keeping
tibble::tibble(
mu_avg = mu_avg,
mu_lwr = mu_lwr,
mu_upr = mu_upr,
y_avg = y_avg,
y_lwr = y_lwr,
y_upr = y_upr
) %>%
tibble::rowid_to_column("pred_id")
}
### add as many code chunks as you'd like
X03_test <- model.matrix( ~ (x1 + I(x1^2))*(x2 + I(x2^2)), data = viz_grid )
post_pred_summary_viz_03_weak <- summarize_lm_pred_from_laplace(laplace_03_weak, X03_test, 5000)
post_pred_summary_viz_03_strong <-
summarize_lm_pred_from_laplace(laplace_06_strong, X03_test, 5000)
### add as many code chunks as you'd like
X03_test <- model.matrix( ~ (x1 + I(x1^2))*(x2 + I(x2^2)), data = viz_grid )
post_pred_summary_viz_03_weak <- summarize_lm_pred_from_laplace(laplace_03_weak, X03_test, 5000)
post_pred_summary_viz_03_strong <-
summarize_lm_pred_from_laplace(laplace_06_strong, X03_test, 5000)
rlang::last_error()
rlang::last_error()
rlang::last_trace()
### add as many code chunks as you'd like
X03_test <- model.matrix( ~ (x1 + I(x1^2))*(x2 + I(x2^2)), data = viz_grid )
post_pred_summary_viz_03_weak <- summarize_lm_pred_from_laplace(laplace_03_weak, X03_test, 5000)
post_pred_summary_viz_03_strong <-
summarize_lm_pred_from_laplace(laplace_03_strong, X03_test, 5000)
post_pred_summary_viz_03_very_strong <- summarize_lm_pred_from_laplace(laplace_03_very_strong, X03_test, 5000)
post_pred_summary_viz_03_weak %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id')
post_pred_summary_viz_03_strong %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id')
post_pred_summary_viz_03_very_strong %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id')
post_pred_summary_viz_03_weak %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id') %>%
ggplot(mapping = aes(x = x1))+
geom_ribbon(mapping = aes(ymin = pred_lwr, ymax = pred_upr), fill = 'orange')+
geom_ribbon(mapping = aes(ymin = ci_lwr, ymax = ci_upr), fill = 'grey')+
geom_line(mapping = aes(y = pred))+
coord_cartesian(ylim = c(-7,7))+
facet_wrap(~x2)
post_pred_summary_viz_03_weak %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id') %>%
ggplot(mapping = aes(x = x1))+
geom_ribbon(mapping = aes(ymin = y_lwr, ymax = y_upr), fill = 'orange')+
geom_ribbon(mapping = aes(ymin = mu_lwr, ymax = mu_upr), fill = 'grey')+
geom_line(mapping = aes(y = pred))+
coord_cartesian(ylim = c(-7,7))+
facet_wrap(~x2)
post_pred_summary_viz_03_weak %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id') %>%
ggplot(mapping = aes(x = x1))+
geom_ribbon(mapping = aes(ymin = y_lwr, ymax = y_upr), fill = 'orange')+
geom_ribbon(mapping = aes(ymin = mu_lwr, ymax = mu_upr), fill = 'grey')+
geom_line(mapping = aes(y = mu_avg))+
coord_cartesian(ylim = c(-7,7))+
facet_wrap(~x2)
post_pred_summary_viz_03_strong %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id') %>%
ggplot(mapping = aes(x = x1))+
geom_ribbon(mapping = aes(ymin = y_lwr, ymax = y_upr), fill = 'orange')+
geom_ribbon(mapping = aes(ymin = mu_lwr, ymax = mu_upr), fill = 'grey')+
geom_line(mapping = aes(y = mu_avg))+
coord_cartesian(ylim = c(-7,7))+
facet_wrap(~x2)
post_pred_summary_viz_03_very_strong %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id') %>%
ggplot(mapping = aes(x = x1))+
geom_ribbon(mapping = aes(ymin = y_lwr, ymax = y_upr), fill = 'orange')+
geom_ribbon(mapping = aes(ymin = mu_lwr, ymax = mu_upr), fill = 'grey')+
geom_line(mapping = aes(y = mu_avg))+
coord_cartesian(ylim = c(-7,7))+
facet_wrap(~x2)
make_splines_training_knots <- function(J, train_data, xname)
{
x <- train_data %>% select(all_of(xname)) %>% pull()
train_basis <- splines::ns(x, df = J)
as.vector(attributes(train_basis)$knots)
}
### add as many code chunks as you'd like
knots <- make_splines_training_knots(12, df, 'x1')
X06_test <- model.matrix( ~ splines::ns(x1, knots = knots) * (x2 + I(x2 ^2) + I(x2^3) + I(x2^4)), data = viz_grid)
### add as many code chunks as you'd like
knots <- make_splines_training_knots(12, df, 'x1')
X06_test <- model.matrix( ~ splines::ns(x1, knots = knots) * (x2 + I(x2 ^2) + I(x2^3) + I(x2^4)), data = viz_grid)
post_pred_summary_viz_06_weak <- summarize_lm_pred_from_laplace(laplace_06_weak, X06_test, 5000)
post_pred_summary_viz_06_strong <-
summarize_lm_pred_from_laplace(laplace_06_strong, X06_test, 5000)
post_pred_summary_viz_06_very_strong <- summarize_lm_pred_from_laplace(laplace_06_very_strong, X06_test, 5000)
post_pred_summary_viz_06_weak %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id') %>%
ggplot(mapping = aes(x = x1))+
geom_ribbon(mapping = aes(ymin = y_lwr, ymax = y_upr), fill = 'orange')+
geom_ribbon(mapping = aes(ymin = mu_lwr, ymax = mu_upr), fill = 'grey')+
geom_line(mapping = aes(y = mu_avg))+
coord_cartesian(ylim = c(-7,7))+
facet_wrap(~x2)
post_pred_summary_viz_06_strong %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id') %>%
ggplot(mapping = aes(x = x1))+
geom_ribbon(mapping = aes(ymin = y_lwr, ymax = y_upr), fill = 'orange')+
geom_ribbon(mapping = aes(ymin = mu_lwr, ymax = mu_upr), fill = 'grey')+
geom_line(mapping = aes(y = mu_avg))+
coord_cartesian(ylim = c(-7,7))+
facet_wrap(~x2)
post_pred_summary_viz_06_very_strong %>%
left_join(viz_grid %>% tibble::rowid_to_column("pred_id"),
by = 'pred_id') %>%
ggplot(mapping = aes(x = x1))+
geom_ribbon(mapping = aes(ymin = y_lwr, ymax = y_upr), fill = 'orange')+
geom_ribbon(mapping = aes(ymin = mu_lwr, ymax = mu_upr), fill = 'grey')+
geom_line(mapping = aes(y = mu_avg))+
coord_cartesian(ylim = c(-7,7))+
facet_wrap(~x2)
library(glmnet)
install.packages("glmnet")
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
model.matrix( y ~ x1 + x2 - 1, data = df) %>% head()
### add more code chunks if you prefer
X03_glmnet <- model.matrix(y ~ (x1 + I(x1 ^2)) *(x2 + I(x2^2)) -1, data = df)
### add more code chunks if you prefer
X03_glmnet <- model.matrix(y ~ (x1 + I(x1 ^2)) *(x2 + I(x2^2)) -1, data = df)
X03_glmnet
### add more code chunks if you prefer
X03_glmnet <- model.matrix(y ~ (x1 + I(x1 ^2)) *(x2 + I(x2^2)) -1, data = df)
X03_glmnet
### add more code chunks if you prefer
X03_glmnet <- model.matrix(y ~ (x1 + I(x1 ^2)) *(x2 + I(x2^2)) -1, data = df)
X03_glmnet
X06_glmnet <- model.matrix(y ~ splines::ns(x1, 12) * (x2 + I(x2^2) + I(x2^3) + I(x2^4)) -1, data =df)
### add more code chunks if you prefer
X03_glmnet <- model.matrix(y ~ (x1 + I(x1 ^2)) *(x2 + I(x2^2)) -1, data = df)
X03_glmnet
X06_glmnet <- model.matrix(y ~ splines::ns(x1, 12) * (x2 + I(x2^2) + I(x2^3) + I(x2^4)) -1, data =df)
X06_glmnet
### add more code chunks if you prefer
X03_glmnet <- model.matrix(y ~ (x1 + I(x1 ^2)) *(x2 + I(x2^2)) -1, data = df)
glimpse(X03_glmnet)
### add more code chunks if you prefer
X03_glmnet <- model.matrix(y ~ (x1 + I(x1 ^2)) *(x2 + I(x2^2)) -1, data = df)
glance(X03_glmnet)
### add more code chunks if you prefer
X03_glmnet <- model.matrix(y ~ (x1 + I(x1 ^2)) *(x2 + I(x2^2)) -1, data = df)
X03_glmnet
X06_glmnet <- model.matrix(y ~ splines::ns(x1, 12) * (x2 + I(x2^2) + I(x2^3) + I(x2^4)) -1, data =df)
X06_glmnet
### add more code chunks if you prefer
X03_glmnet <- model.matrix(y ~ (x1 + I(x1 ^2)) *(x2 + I(x2^2)) -1, data = df)
X03_glmnet
X06_glmnet <- model.matrix(y ~ splines::ns(x1, 12) * (x2 + I(x2^2) + I(x2^3) + I(x2^4)) -1, data =df)
X06_glmnet
### add more code chunks if you prefer
X03_glmnet <- model.matrix(y ~ (x1 + I(x1 ^2)) *(x2 + I(x2^2)) -1, data = df)
colnames(X03_glmnet)
X06_glmnet <- model.matrix(y ~ splines::ns(x1, 12) * (x2 + I(x2^2) + I(x2^3) + I(x2^4)) -1, data =df)
colnames(X06_glmnet)
### add more code chunks if you like
lasso_03 <- glmnet(X03_glmnet, df$y)
### add more code chunks if you like
lasso_03 <- glmnet(X03_glmnet, df$y)
lasso_06 <- glmnet(X06_glmnet, df$y)
plot(lasso_03, xvar = 'lambda')
plot(lasso_03, xvar = 'lambda', label = TRUE)
plot(lasso_03, xvar = 'lambda', label = TRUE)
plot(lasso_06, xvar = 'lambda', label = TRUE)
### add more code chunks if you like
lasso_03_cv_tune <- cv.glmnet(X03_glmnet, df$y, alpha = 1)
lasso_06_cv_tune <- cv.glmnet(X06_glmnet, df$y, alpha = 1)
### add more code chunks if you like
plot(lasso_03_cv_tune)
### add more code chunks if you like
plot(lasso_03_cv_tune)
plot(lasso_06_cv_tune)
### add more code chunks if you like
coef(lasso_03_cv_tune)
### add more code chunks if you like
coef(lasso_03_cv_tune)
coef(lasso_06_cv_tune)
### add more code chunks if you like
coef(lasso_03_cv_tune)
coef(lasso_06_cv_tune)
### For mod03
coef(lasso_03_cv_tune)
### For mod03
coef(lasso_03_cv_tune)
install.packages("rstudioapi")
rstudioapi::addTheme("http://url-to-the-rstheme/", apply = TRUE)
yule_theme <- "https://raw.githubusercontent.com/gadenbuie/yule-rstudio/master/Yule-RStudio.rstheme"
rstudioapi::addTheme(yule_theme, apply = TRUE)
oceanic_theme <- "https://raw.githubusercontent.com/gadenbuie/oceanic-eighties/master/oceanic-eighties.rstheme"
rstudioapi::addTheme(oceanic_theme, apply = TRUE)
driven_snow <- "https://raw.githubusercontent.com/mkearney/driven-snow/master/theme/driven-snow.rstheme"
rstudioapi::addTheme(driven_snow, apply = TRUE)
ayu_light_owl <- "https://raw.githubusercontent.com/js-oh/ayu-light-owl/master/ayu-light-owl.rstheme"
rstudioapi::addTheme(ayu_light_owl, apply = TRUE)
my_theme <- "https://raw.githubusercontent.com/brunaw/my-theme/master/my-theme.rstheme"
rstudioapi::addTheme(my_theme, apply = TRUE)
