"0","my_neuralnet_sse <- function(theta, my_info)"
"0","{"
"0","  # extract the hidden unit parameters"
"0","  X <- my_info$design_matrix"
"0","  length_beta_per_unit <- ncol(X)"
"0","  total_num_betas <- my_info$num_hidden * length_beta_per_unit"
"0","    "
"0","  beta_vec <- theta[1:total_num_betas]"
"0","  "
"0","  # reorganize the beta parameters into a matrix"
"0","  Bmat <- matrix(beta_vec, nrow = length_beta_per_unit, byrow = FALSE)"
"0","  "
"0","  # extract the output layer parameters"
"0","  a_all <- theta[(total_num_betas + 1):length(theta)]"
"0","  "
"0","  # reorganize the output layer parameters by extracting"
"0","  # the output layer intercept (the bias)"
"0","  a0 <- a_all[1]"
"0","  aw <- a_all[2:length(a_all)]"
"0","  "
"0","  # calculate the linear predictors associated with"
"0","  # each hidden unit"
"0","  A <- X %*% Bmat"
"0","  "
"0","  # pass through the non-linear transformation function"
"0","  H <- my_info$transform_hidden( A )"
"0","  "
"0","  # calculate the response (the output layer)"
"0","  f <- as.vector(a0 + H %*% as.matrix(aw))"
"0","  "
"0","  # calculate the SSE"
"0","  return(sum((my_info$yobs - f)^2))"
"0","}"
