library(caret)
library(caret)
trainControl()
?trainControl
### your code here
my_ctrl <- trainControl(number = 5, repeats = 3)
### your code here
my_ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3)
### your code here
my_ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3)
my_ctrl
### your code here
my_ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3)
### your code here
my_ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3)
my_metric <- metric='RMSE'
### your code here
my_ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3)
my_metric <- 'RMSE'
### your code here
my_ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3)
my_metric <- 'RMSE'
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
nnet_default
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
nnet_default
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl)
nnet_default
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
nnet_default
### your code here
my_ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3, savePredictions = TRUE)
my_metric <- 'RMSE'
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
nnet_default
### your code here
my_ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3, savePredictions = TRUE)
my_metric <- 'RMSE'
### your code here
my_ctrl <- trainControl(method = 'cv', number = 5, repeats = 3, savePredictions = TRUE)
my_metric <- 'RMSE'
### your code here
my_ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3, savePredictions = TRUE)
my_metric <- 'RMSE'
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
nnet_default
View(nnet_default)
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
nnet_default$bestTune
knitr::opts_chunk$set(echo = TRUE)
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
url_01 <- 'https://raw.githubusercontent.com/jyurko/INFSCI_2595_Spring_2022/main/HW/10/hw_10_prob_01_train.csv'
prob_01_df <- readr::read_csv(url_01, col_names = TRUE)
prob_01_df %>% glimpse()
###
prob_01_df %>%
ggplot()+
geom_line(mapping = aes(x = x, y = f))+
geom_point(mapping = aes(x = x, y = f))
url_load_dir <- 'https://github.com/jyurko/INFSCI_2595_Spring_2022/blob/main/HW/10'
url_load_01_2a <- paste(paste(url_load_dir, "hw_10_prob_01_params_2a.rds", sep = "/"),
"raw=true",
sep="?")
params_01_2a <- readr::read_rds( file = url_load_01_2a )
params_01_2a
calc_hidden_units <- function(X, B, g)
{
### your code
A <- X %*% B
H <- g(A)
### book keeping
return(list(A = A, H = H))
}
viz_hidden_trend_wrt_x <- function(v_mat, x_df, trend_type)
{
x_df %>%
select(all_of(c("x"))) %>%
tibble::rowid_to_column("obs_id") %>%
left_join(v_mat %>% as.data.frame() %>%
tibble::as_tibble() %>%
purrr::set_names(sprintf("h_%02d", 1:ncol(v_mat))) %>%
tibble::rowid_to_column("obs_id"),
by = "obs_id") %>%
pivot_longer(!c("obs_id", "x")) %>%
ggplot(mapping = aes(x = x, y = value)) +
geom_vline(xintercept = 0, color = 'grey50') +
geom_line(mapping = aes(color = name, group = name),
size = 1.15) +
ggthemes::scale_color_colorblind(trend_type) +
theme_bw() +
theme(legend.position = "top")
}
X01 <- model.matrix( ~ x, prob_01_df)
nnet_hidden_2a <- calc_hidden_units(X01, params_01_2a$beta_matrix, boot::inv.logit)
nnet_hidden_2a
viz_hidden_trend_wrt_x(nnet_hidden_2a$A,
prob_01_df,
"hidden linear predictors")
viz_hidden_trend_wrt_x(nnet_hidden_2a$H,
prob_01_df,
"hidden non-linear units")
calc_nnet_response <- function(H, a)
{
### separate the vector into bias and weights
a0 <- a[1]
a_w <- a[2:length(a)]
# convert the weights to a column vector
a_col <- as.matrix(a_w)
# calculate the response (the output layer)
f <- a0 + H %*% a_col
as.vector(f)
}
prob_01_df %>%
mutate(nnet_f = calc_nnet_response(nnet_hidden_2a$H, params_01_2a$alpha_vector)) %>%
ggplot(mapping = aes(x = x)) +
geom_line(mapping = aes(y = nnet_f),
color = "black", size = 1.15) +
geom_point(mapping = aes(y = f),
color = "red", shape = 1, size = 3.5) +
labs(y = "f") +
theme_bw()
url_load_01_2b <- paste(paste(url_load_dir, "hw_10_prob_01_params_2b.rds", sep = "/"),
"raw=true",
sep="?")
params_01_2b <- readr::read_rds( url_load_01_2b )
params_01_2b
X02 <- model.matrix( ~ x, prob_01_df)
nnet_hidden_2b <- calc_hidden_units(X02, params_01_2b$beta_matrix, boot::inv.logit)
viz_hidden_trend_wrt_x(nnet_hidden_2b$A,
prob_01_df,
"hidden linear predictors")
viz_hidden_trend_wrt_x(nnet_hidden_2b$H,
prob_01_df,
"hidden non-linear units")
results_2hidden <- prob_01_df %>%
mutate(nnet_fa = calc_nnet_response(nnet_hidden_2a$H, params_01_2a$alpha_vector),
nnet_fb = calc_nnet_response(nnet_hidden_2b$H, params_01_2b$alpha_vector))
results_2hidden %>%
pivot_longer(!c("x", "f")) %>%
ggplot(mapping = aes(x = x)) +
geom_line(mapping = aes(y = value,
group = name,
linetype = name,
color = name),
size = 1.15) +
geom_point(mapping = aes(y = f),
color = "red", size = 3, shape = 1) +
ggthemes::scale_color_colorblind("Model") +
scale_linetype_discrete("Model") +
labs(y = "f") +
theme_bw()
url_load_01_5a <- paste(paste(url_load_dir, "hw_10_prob_01_params_5a.rds", sep = "/"),
"raw=true",
sep="?")
params_02_5a <- readr::read_rds( url_load_01_5a )
url_load_01_5b <- paste(paste(url_load_dir, "hw_10_prob_01_params_5b.rds", sep = "/"),
"raw=true",
sep="?")
params_02_5b <- readr::read_rds( url_load_01_5b )
params_02_5a
X05 <- model.matrix( ~ x, data = prob_01_df)
nnet_hidden_5a <- calc_hidden_units(X05, params_02_5a$beta_matrix, boot::inv.logit)
nnet_hidden_5b <- calc_hidden_units(X05, params_02_5b$beta_matrix, boot::inv.logit)
viz_hidden_trend_wrt_x(nnet_hidden_5a$A,
prob_01_df,
"hidden linear predictors")
viz_hidden_trend_wrt_x(nnet_hidden_5a$H,
prob_01_df,
"hidden non-linear units")
viz_hidden_trend_wrt_x(nnet_hidden_5b$A,
prob_01_df,
"hidden linear predictors")
viz_hidden_trend_wrt_x(nnet_hidden_5b$H,
prob_01_df,
"hidden non-linear units")
results_5hidden <- prob_01_df %>%
mutate(nnet_fa = calc_nnet_response(nnet_hidden_5a$H, params_02_5a$alpha_vector),
nnet_fb = calc_nnet_response(nnet_hidden_5b$H, params_02_5b$alpha_vector))
results_5hidden %>%
pivot_longer(!c("x", "f")) %>%
ggplot(mapping = aes(x = x)) +
geom_line(mapping = aes(y = value,
group = name,
linetype = name,
color = name),
size = 1.15) +
geom_point(mapping = aes(y = f),
color = "red", size = 3, shape = 1) +
ggthemes::scale_color_colorblind("Model") +
scale_linetype_discrete("Model") +
labs(y = "f") +
theme_bw()
results_2hidden %>%
mutate(num_hidden = 2) %>%
bind_rows(results_5hidden %>%
mutate(num_hidden = 5)) %>%
pivot_longer(!c("x", "f", "num_hidden")) %>%
tidyr::separate(name,
c("nnet_word", "fparams"),
sep = "_") %>%
tidyr::separate(fparams,
c("fltr", "paramset"),
sep = 1) %>%
ggplot(mapping = aes(x = x)) +
geom_line(mapping = aes(y = value,
group = interaction(paramset,
num_hidden),
linetype = paramset,
color = paramset),
size = 1.15) +
geom_point(mapping = aes(y = f),
color = "red", size = 3, shape = 1) +
facet_grid( ~ num_hidden, labeller = "label_both") +
ggthemes::scale_color_colorblind("Params") +
scale_linetype_discrete("Params") +
labs(y = "f") +
theme_bw()
lm_sine_mod <- lm(f ~ sin(x), prob_01_df)
### print the summary to the screen
lm_sine_mod %>% summary()
url_03_train <- 'https://raw.githubusercontent.com/jyurko/INFSCI_2595_Spring_2022/main/HW/10/hw_10_prob_03_train.csv'
prob_03_df <- readr::read_csv( url_03_train, col_names = TRUE)
prob_03_df %>% glimpse()
prob_03_lf <- prob_03_df %>%
tibble::rowid_to_column("obs_id") %>%
pivot_longer(!c("obs_id", "y"))
prob_03_lf %>% glimpse()
###
prob_03_lf %>%
ggplot(mapping = aes(x = value, y = y))+
geom_point()+
facet_wrap(~name)
tibble::tibble(
x = seq(-5.5, 5.5, length.out = 101)
) %>%
mutate(logistic_result = boot::inv.logit(x),
tanh_result = tanh(x)) %>%
# rest of the code here is completed for you
pivot_longer(!c("x")) %>%
ggplot(mapping = aes(x = x, y = value)) +
geom_hline(yintercept = c(-1, 0, 1),
color = 'grey50', linetype = 'dashed') +
geom_line(mapping = aes(y = value,
color = name,
linetype = name),
size = 1.15) +
ggthemes::scale_color_calc("") +
scale_linetype_discrete("") +
theme_bw() +
theme(legend.position = "top")
### design matrix
Xmat_03 <- model.matrix(y ~ x1 + x2 + x3, prob_03_df)
info_three_units <- list(
yobs = prob_03_df$y,
design_matrix = Xmat_03,
num_hidden = 3,
transform_hidden = tanh
)
info_three_units$num_params <- info_three_units$num_hidden * ncol(Xmat_03) + info_three_units$num_hidden + 1
info_three_units$num_params
my_neuralnet_sse <- function(theta, my_info)
{
# extract the hidden unit parameters
X <- my_info$design_matrix
length_beta_per_unit <- ncol(X)
total_num_betas <- my_info$num_hidden * length_beta_per_unit
beta_vec <- theta[1:total_num_betas]
# reorganize the beta parameters into a matrix
Bmat <- matrix(beta_vec, nrow = length_beta_per_unit, byrow = FALSE)
# extract the output layer parameters
a_all <- theta[(total_num_betas + 1):length(theta)]
# reorganize the output layer parameters by extracting
# the output layer intercept (the bias)
a0 <- a_all[1]
aw <- a_all[2:length(a_all)]
# calculate the linear predictors associated with
# each hidden unit
A <- X %*% Bmat
# pass through the non-linear transformation function
H <- my_info$transform_hidden( A )
# calculate the response (the output layer)
f <- as.vector(a0 + H %*% as.matrix(aw))
# calculate the SSE
return(sum((my_info$yobs - f)^2))
}
my_neuralnet_sse(rep(0, info_three_units$num_params), info_three_units)
my_neuralnet_sse(rep(-1.25, info_three_units$num_params), info_three_units)
optim_fit_3_a <- optim(rep(0, info_three_units$num_params),
my_neuralnet_sse,
gr = NULL,
info_three_units,
method =  "BFGS",
hessian =  FALSE,
control = list(maxit = 5001))
optim_fit_3_b <- optim(rep(-1.25, info_three_units$num_params),
my_neuralnet_sse,
gr =  NULL,
info_three_units,
method =  "BFGS",
hessian =  FALSE,
control = list(maxit = 5001))
###optim_fit_3_a
optim_fit_3_a$par
optim_fit_3_b$par
set.seed(412412)
init_guess_03_c <- rnorm(info_three_units$num_params, mean = 0, sd = 1)
set.seed(214214)
init_guess_03_d <- rnorm(info_three_units$num_params, mean = 0, sd = 1)
optim_fit_3_c <- optim(init_guess_03_c,
my_neuralnet_sse,
gr = NULL,
info_three_units,
method =  "BFGS",
hessian =  FALSE,
control = list(maxit = 5001))
optim_fit_3_d <- optim( init_guess_03_d,
my_neuralnet_sse,
gr =  NULL,
info_three_units,
method =  "BFGS",
hessian =  FALSE,
control = list(maxit = 5001))
###
optim_fit_3_c$par
optim_fit_3_d$par
sseData = c(optim_fit_3_a$value, optim_fit_3_b$value, optim_fit_3_c$value, optim_fit_3_d$value)
sseData
train_1layer_nnet_sse <- function(num_hidden, transform_func, X, y)
{
my_info_list <- list(
yobs = y,
design_matrix = X,
num_hidden = num_hidden,
transform_hidden = transform_func
)
my_info_list$num_params <- num_hidden * ncol(X) + num_hidden + 1
# generate random initial guess
init_guess <- rnorm(n = my_info_list$num_params, mean = 0, sd = 1)
# call optim to fit the neural network
optim( init_guess,
my_neuralnet_sse,
gr =  NULL,
my_info_list,
method =  "BFGS",
hessian =  FALSE,
control = list(maxit = 10001))
}
set.seed(412412)
check_optim_fit_3_c <- train_1layer_nnet_sse(3, tanh, Xmat_03, prob_03_df$y)
###
all.equal(check_optim_fit_3_c$par, optim_fit_3_c$par)
set.seed(412412)
optim_fit_6_a = train_1layer_nnet_sse(6, tanh, Xmat_03, prob_03_df$y)
set.seed(214214)
optim_fit_6_b = train_1layer_nnet_sse(6, tanh, Xmat_03, prob_03_df$y)
set.seed(412412)
optim_fit_12_a = train_1layer_nnet_sse(12, tanh, Xmat_03, prob_03_df$y)
set.seed(214214)
optim_fit_12_b = train_1layer_nnet_sse(12, tanh, Xmat_03, prob_03_df$y)
set.seed(412412)
optim_fit_24_a = train_1layer_nnet_sse(24, tanh, Xmat_03, prob_03_df$y)
set.seed(214214)
optim_fit_24_b = train_1layer_nnet_sse(24, tanh, Xmat_03, prob_03_df$y)
optim_fit_3_c$value
optim_fit_3_d$value
optim_fit_6_a$value
optim_fit_6_b$value
optim_fit_12_a$value
optim_fit_12_b$value
optim_fit_24_a$value
optim_fit_24_b$value
url_03_test <- 'https://raw.githubusercontent.com/jyurko/INFSCI_2595_Spring_2022/main/HW/10/hw_10_prob_03_test.csv'
prob_03_test_df <- readr::read_csv( url_03_test, col_names = TRUE)
prob_03_test_df %>% glimpse()
assess_nnet_mse <- function(theta, num_hidden, transform_func, X, y)
{
my_info_list <- list(
yobs = y,
design_matrix = X,
num_hidden = num_hidden,
transform_hidden = transform_func
)
my_info_list$num_params <- length(theta)
return(my_neuralnet_sse(theta, my_info_list) / length(y))
}
Xtest_03 = model.matrix(y ~ x1+x2+x3, data = prob_03_test_df)
mse_model3a <- assess_nnet_mse(optim_fit_3_c$par, 3, tanh, Xtest_03, prob_03_test_df$y)
mse_model3b <- assess_nnet_mse(optim_fit_3_d$par, 3, tanh, Xtest_03, prob_03_test_df$y)
mse_model6a <- assess_nnet_mse(optim_fit_6_a$par, 6, tanh, Xtest_03, prob_03_test_df$y)
mse_model6b <- assess_nnet_mse(optim_fit_6_b$par, 6, tanh, Xtest_03, prob_03_test_df$y)
mse_model12a <- assess_nnet_mse(optim_fit_12_a$par, 12, tanh, Xtest_03, prob_03_test_df$y)
mse_model12b <- assess_nnet_mse(optim_fit_12_b$par, 12, tanh, Xtest_03, prob_03_test_df$y)
mse_model24a <- assess_nnet_mse(optim_fit_24_a$par, 24, tanh, Xtest_03, prob_03_test_df$y)
mse_model24b <- assess_nnet_mse(optim_fit_24_b$par, 24, tanh, Xtest_03, prob_03_test_df$y)
mse_model3a
mse_model3b
mse_model6a
mse_model6b
mse_model12a
mse_model12b
mse_model24a
mse_model24b
library(caret)
### your code here
my_ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3, savePredictions = TRUE)
my_metric <- 'RMSE'
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
nnet_default
set.seed(412412)
nnet_default <- train(y ~ x1+x2+x3,
data = prob_03_df,
method = 'nnet',
metric = my_metric,
preProcess = c('center', 'scale'),
trControl = my_ctrl,
trace = FALSE)
plot(nnet_default)
