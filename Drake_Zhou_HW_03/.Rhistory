dotplot(acc_results, metric = "Accuracy")
confusionMatrix(data = mod_3_acc)
confusionMatrix(data = mod_2_acc)
confusionMatrix(data = mod_5_acc)
confusionMatrix(data = mod_8_acc)
ctrl_roc <- trainControl(method = "repeatedcv",
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
metric_roc <- "ROC"
### model 1
set.seed(2021)
mod_1_roc <- train(
y~x1+x2+x3+x4,
data = df,
method = "glm",
metric = metric_roc,
trControl = ctrl_roc
)
### model 2
set.seed(2021)
mod_2_roc <- train(
y~x1+x2+x3+x4+I(x1^2)+I(x2^2)+I(x3^2)+I(x4^2),
data = df,
method = "glm",
metric = metric_roc,
trControl = ctrl_roc
)
### model 3
set.seed(2021)
mod_3_roc <- train(
y~x1+x2+I(x1^2)+I(x2^2),
data = df,
method = "glm",
metric = metric_roc,
trControl = ctrl_roc)
### model 4
set.seed(2021)
mod_4_roc <- train(
y~x1+x3+I(x1^2)+I(x3^2),
data = df,
method = "glm",
metric = metric_roc,
trControl = ctrl_roc
)
### model 5
set.seed(2021)
mod_5_roc <- train(
y~x1+x4+I(x1^2)+I(x4^2),
data = df,
method = "glm",
metric = metric_roc,
trControl = ctrl_roc
)
### model 6
set.seed(2021)
mod_6_roc <- train(
y~x2+x3+I(x2^2)+I(x3^2),
data = df,
method = "glm",
metric = metric_roc,
trControl = ctrl_roc
)
### model 7
set.seed(2021)
mod_7_roc <- train(
y~x2+x4+I(x2^2)+I(x4^2),
data = df,
method = "glm",
metric = metric_roc,
trControl = ctrl_roc
)
### model 8
set.seed(2021)
mod_8_roc <- train(
y~x3+x4+I(x3^2)+I(x4^2),
data = df,
method = "glm",
metric = metric_roc,
trControl = ctrl_roc
)
roc_results <- resamples(list(mod_1 = mod_1_roc,
mod_2 = mod_2_roc,
mod_3 = mod_3_roc,
mod_4 = mod_4_roc,
mod_5 = mod_5_roc,
mod_6 = mod_6_roc,
mod_7 = mod_7_roc,
mod_8 = mod_8_roc))
### add your code here
summary(roc_results, metric = "ROC")
### add your code here
dotplot(roc_results, metric = "ROC")
### add your code here
mod_1_roc$pred %>% roc_curve(obs, event)
### add your code here
mod_1_roc$pred %>% roc_curve(obs, event) %>% autoplot()
### add your code here
mod_1_roc$pred %>%
group_by(Resample) %>%
roc_curve(obs, event) %>%
autoplot()
compile_all_model_preds <- function(m1, m2, m3, m4, m5, m6, m7, m8){
purrr::map2_dfr(list(m1, m2, m3, m4, m5, m6, m7, m8),
as.character(seq_along(list(m1, m2, m3, m4, m5, m6, m7, m8))),
function(ll, lm){
ll$pred %>% tibble::as_tibble() %>%
select(obs, event, Resample) %>%
mutate(model_name = lm)
})
}
all_model_preds <- compile_all_model_preds(mod_1_roc, mod_2_roc, mod_3_roc,
mod_4_roc, mod_5_roc,
mod_6_roc, mod_7_roc, mod_8_roc)
all_model_preds
### add your code here
all_model_preds %>%
group_by(model_name) %>%
roc_curve(obs, event) %>%
autoplot()
hw03_test_url <- 'https://raw.githubusercontent.com/jyurko/INFSCI_2595_Spring_2022/main/HW/03/hw03_test_data.csv'
df_test <- readr::read_csv(hw03_test_url, col_names = TRUE)
df_test <- df_test %>%
mutate(y = factor(y, levels = c("event", "non_event")))
df_test %>% glimpse()
### add more code chunks if you like
pred_test_1 <- predict(mod_1_acc, df_test, type = "prob")
typeof(pred_test_1)
head(pred_test_1)
test_df_1 <- df_test %>% bind_cols(pred_test_1)
tibble::tibble(x = 0:100) %>%
mutate(x_bins = cut(x,
breaks = seq(0, 100, by = 10),
include.lowest = TRUE)) %>%
count(x_bins)
### your code here
formate_b_data <- function(test_df){
return(
test_df %>%
mutate(pred_bin = cut(event,
breaks = seq(0,1, by = 0.1),
include.lowest = TRUE)
)
)
}
test_df_1_b <- formate_b_data(test_df_1)
test_df_1_b
### your code here
test_df_1_b %>% group_by(pred_bin) %>% count()
### your code here
test_df_1_b %>%
ggplot() +
geom_bar(mapping = aes(x = pred_bin))
### your code here
test_df_1_b %>%
ggplot() +
geom_bar(mapping = aes(x = pred_bin, fill = y)) +
scale_color_brewer(palette = "Set1")
### your code here
test_df_1_b %>%
ggplot() +
geom_bar(mapping = aes(x = pred_bin, fill = y), position = "fill") +
scale_color_brewer(palette = "Set1")
formate_tibble_data <- function(test_dataframe){
test_dataframe %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_dataframe %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_1 <- inner_join(data_1, data_2, by = "pred_bin")
my_calcurve_1 %>% add_column(mid_bin = seq(0.05,1, by = 0.1)) -> my_calcurve_1
my_calcurve_1 <- mutate(my_calcurve_1,
prop_event = event_count / all_count,
prop_non_event = 1 - (event_count / all_count))
}
my_calcurve_1 <- formate_tibble_data(test_df_1_b)
my_calcurve_1
### your code here
create_plot <- function(my_calcurve_1){
my_calcurve_1 %>%
ggplot()+
geom_line(mapping = aes(x = mid_bin, y = prop_event))+
geom_point(mapping = aes(x = mid_bin, y = prop_event))+
geom_abline(slope = 1, intercept = 0, color = "grey", linetype = "dashed")+
coord_equal(xlim = c(0,1), ylim = c(0,1))
}
create_plot(my_calcurve_1)
### add more code chunks if you like
pred_test_3 <- predict(mod_3_acc, df_test, type = "prob")
pred_test_8 <- predict(mod_8_acc, df_test, type = "prob")
pred_test_3
pred_test_8
test_df_3 <- df_test %>% bind_cols(pred_test_3)
test_df_8 <- df_test %>% bind_cols(pred_test_8)
### add more chunks if you like
test_df_3_b <- formate_b_data(test_df_3)
test_df_8_b <- formate_b_data(test_df_8)
test_df_3_b
test_df_8_b
### your code here
test_df_3_b %>%
ggplot() +
geom_bar(mapping = aes(x = pred_bin, fill = y), position = "fill") +
scale_color_brewer(palette = "Set1")
### your code here
test_df_8_b %>%
ggplot() +
geom_bar(mapping = aes(x = pred_bin, fill = y), position = "fill") +
scale_color_brewer(palette = "Set1")
my_calcureve_3 <- formate_tibble_data(test_df_3_b)
my_calcureve_3
my_calcurve_3 <- formate_tibble_data(test_df_3_b)
my_calcurve_3
my_calcurve_8 <- formate_tibble_data(test_df_8_b)
formate_tibble_data <- function(test_dataframe){
test_dataframe %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_dataframe %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_1 <- inner_join(data_1, data_2, by = "pred_bin")
my_calcurve_1 %>% add_column(mid_bin = seq(0.05,1, by = 0.1)) -> my_calcurve_1
my_calcurve_1 <- mutate(my_calcurve_1,
prop_event = event_count / all_count,
prop_non_event = 1 - (event_count / all_count))
}
my_calcurve_1 <- formate_tibble_data(test_df_1_b)
my_calcurve_1
typeof(my_calcurve_1$pred_bin)
formate_tibble_data <- function(test_dataframe){
test_dataframe %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_dataframe %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_1 <- inner_join(data_1, data_2, by = "pred_bin")
my_calcurve_1 %>% add_column(mid_bin = seq(0.05,1, by = 0.1)) -> my_calcurve_1
my_calcurve_1 <- mutate(my_calcurve_1,
prop_event = event_count / all_count,
prop_non_event = 1 - (event_count / all_count))
}
my_calcurve_1 <- formate_tibble_data(test_df_1_b)
my_calcurve_1
my_calcurve_1 / 2
formate_tibble_data <- function(test_dataframe){
test_dataframe %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_dataframe %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_1 <- inner_join(data_1, data_2, by = "pred_bin")
my_calcurve_1 %>% add_column(mid_bin = seq(0.05,1, by = 0.1)) -> my_calcurve_1
my_calcurve_1 <- mutate(my_calcurve_1,
prop_event = event_count / all_count,
prop_non_event = 1 - (event_count / all_count))
}
my_calcurve_1 <- formate_tibble_data(test_df_1_b)
my_calcurve_1
my_calcurve_1$pred_bin / 2
formate_tibble_data <- function(test_dataframe){
test_dataframe %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_dataframe %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_1 <- inner_join(data_1, data_2, by = "pred_bin")
my_calcurve_1 %>% add_column(mid_bin = seq(0.05,1, by = 0.1)) -> my_calcurve_1
my_calcurve_1 <- mutate(my_calcurve_1,
prop_event = event_count / all_count,
prop_non_event = 1 - (event_count / all_count))
}
my_calcurve_1 <- formate_tibble_data(test_df_1_b)
my_calcurve_1
my_calcurve_1$pred_bin+2
formate_tibble_data <- function(test_dataframe){
test_dataframe %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_dataframe %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_1 <- inner_join(data_1, data_2, by = "pred_bin")
my_calcurve_1 %>% add_column(mid_bin = seq(0.05,1, by = 0.1)) -> my_calcurve_1
my_calcurve_1 <- mutate(my_calcurve_1,
prop_event = event_count / all_count,
prop_non_event = 1 - (event_count / all_count))
}
my_calcurve_1 <- formate_tibble_data(test_df_1_b)
my_calcurve_1
my_calcurve_1$pred_bin
formate_tibble_data <- function(test_dataframe){
test_dataframe %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_dataframe %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_1 <- inner_join(data_1, data_2, by = "pred_bin")
my_calcurve_1 %>% add_column(mid_bin = seq(0.05,1, by = 0.1)) -> my_calcurve_1
my_calcurve_1 <- mutate(my_calcurve_1,
prop_event = event_count / all_count,
prop_non_event = 1 - (event_count / all_count))
}
my_calcurve_1 <- formate_tibble_data(test_df_1_b)
my_calcurve_1
mean(my_calcurve_1$pred_bin)
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- inner_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.05,1, by = 0.1)) -> my_calcurve_1
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- inner_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,1, by = 0.1)) -> my_calcurve_1
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- inner_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_1
View(data_2)
View(data_1)
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- inner_join(data_1, data_2, by = "pred_bin")
#my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_1
#my_calcurve_8 <- mutate(my_calcurve_1,
#                        prop_event = event_count / all_count,
#                        prop_non_event = 1 - (event_count / all_count))
my_calcurve_8
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
#my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_1
#my_calcurve_8 <- mutate(my_calcurve_1,
#                        prop_event = event_count / all_count,
#                        prop_non_event = 1 - (event_count / all_count))
my_calcurve_8
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_1
#my_calcurve_8 <- mutate(my_calcurve_1,
#                        prop_event = event_count / all_count,
#                        prop_non_event = 1 - (event_count / all_count))
my_calcurve_8
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_1
#my_calcurve_8 <- mutate(my_calcurve_1,
#                        prop_event = event_count / all_count,
#                        prop_non_event = 1 - (event_count / all_count))
my_calcurve_8
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
#my_calcurve_8 <- mutate(my_calcurve_1,
#                        prop_event = event_count / all_count,
#                        prop_non_event = 1 - (event_count / all_count))
my_calcurve_8
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
prop_event = event_count / all_count,
prop_non_event = 1 - (event_count / all_count))
my_calcurve_8
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
prop_event = ifelse(!is.na(event_count), event_count / all_count, 0)
prop_non_event = 1 - (event_count / all_count))
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
prop_event = ifelse(is.na(event_count), event_count / all_count, 0)
prop_non_event = 1 - (event_count / all_count))
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
prop_event = ifelse(is.na(), event_count / all_count, 0)
prop_non_event = 1 - (event_count / all_count))
?is.na()
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
prop_event = ifelse(is.na(event_count), event_count / all_count, 0)
prop_non_event = 1 - (event_count / all_count))
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
prop_event = ifelse(is.na(event_count), event_count / all_count, 0),
prop_non_event = 1 - (event_count / all_count))
my_calcurve_8
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
prop_event = ifelse(!is.na(event_count), event_count / all_count, 0),
prop_non_event = 1 - (event_count / all_count))
my_calcurve_8
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") -> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
prop_event = ifelse(!is.na(event_count), event_count / all_count, 0),
prop_non_event = ifelse(!is.na(event_count), 1 - (event_count / all_count), 1))
my_calcurve_8
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") %>% ifelse(n>0, n, 0)-> data_1
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count") %>% ifelse(event_count>0, n, 0)-> data_1
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count")-> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
event_count = ifelse(!is.na(event_count), event_count, 0)
prop_event = ifelse(!is.na(event_count), event_count / all_count, 0),
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count")-> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
event_count = ifelse(!is.na(event_count), event_count, 0),
prop_event = ifelse(!is.na(event_count), event_count / all_count, 0),
prop_non_event = ifelse(!is.na(event_count), 1 - (event_count / all_count), 1))
my_calcurve_8
test_df_8_b %>% group_by(pred_bin) %>% filter(y == "event") %>% count(name = "event_count")-> data_1
test_df_8_b %>% group_by(pred_bin) %>% count(name = "all_count") -> data_2
my_calcurve_8 <- full_join(data_1, data_2, by = "pred_bin")
my_calcurve_8 %>% add_column(mid_bin = seq(0.35,0.8, by = 0.1)) -> my_calcurve_8
my_calcurve_8 <- mutate(my_calcurve_1,
event_count = ifelse(!is.na(event_count), event_count, 0),
prop_event =  event_count / all_count,
prop_non_event = 1 - (event_count / all_count))
my_calcurve_8
### your code here
create_plot(my_calcureve_3)
### your code here
create_plot(my_calcureve_8)
### your code here
create_plot(my_calcurve_3)
### your code here
create_plot(my_calcurve_8)
### your code here
caret::calibration(data = test_df_1, cuts = 10)
View(test_df_1)
### your code here
caret::calibration(test_df_1, cuts = 10)
### your code here
caret::calibration(y~x1+x2+x3+x4, cuts = 10)
### your code here
caret::calibration(y~x1+x2+x3+x4, test_df_1, cuts = 10)
### your code here
caret::calibration(y~x1+x2+x3+x4, test_df_1, cuts = 10) %>% xyplot()
### your code here
caret::calibration(y~x1+x2+x3+x4, test_df_1, cuts = 5) %>% xyplot()
### your code here
caret::calibration(y~x1+x2+x3+x4, test_df_1, cuts = 10) %>% xyplot()
### your code here
caret::calibration(y~x1+x2+I(x1^2)+I(x2^2), test_df_3, cuts = 10) %>% xyplot()
View(pred_test_1)
View(test_df_1)
View(my_calcureve_3)
### your code here
caret::calibration(y~x3+x4+I(x3^2)+I(x4^2), test_df_3, cuts = 10) %>% xyplot()
### your code here
caret::calibration(y~x3+x4+I(x3^2)+I(x4^2), test_df_8, cuts = 10) %>% xyplot()
View(test_df_1)
View(test_df_1_b)
View(data_1)
### add more code chunks if you like
pred_test_1 <- predict(mod_1_acc, type = "prob")
typeof(pred_test_1)
head(pred_test_1)
### add more code chunks if you like
pred_test_1 <- predict(mod_1_acc, df_test, type = "prob")
typeof(pred_test_1)
### add more code chunks if you like
pred_test_1 <- predict(mod_1_acc, df_test, type = "prob")
typeof(pred_test_1)
head(pred_test_1)
### add more code chunks if you like
pred_test_1 <- predict(mod_1_acc, type = "prob")
typeof(pred_test_1)
head(pred_test_1)
### add more code chunks if you like
pred_test_1 <- predict(mod_1_acc, df_test, type = "prob")
typeof(pred_test_1)
### your code here
caret::calibration(y~event, test_df_1, cuts = 10) %>% xyplot()
### your code here
caret::calibration(y~event, test_df_3, cuts = 10) %>% xyplot()
### your code here
caret::calibration(y~event, test_df_8, cuts = 10) %>% xyplot()
### your code here
create_plot(my_calcurve_8)
### your code here
test_df_3_b %>%
ggplot() +
geom_bar(mapping = aes(x = pred_bin, y= y) +
scale_color_brewer(palette = "Set1")
View(test_df_3_b)
### your code here
test_df_3_b %>%
ggplot() +
geom_bar(mapping = aes(x = pred_bin) +
scale_color_brewer(palette = "Set1")
### your code here
test_df_3_b %>%
ggplot() +
geom_bar(mapping = aes(x = pred_bin) +
scale_color_brewer(palette = "Set1")
### your code here
test_df_3_b %>%
ggplot() +
geom_bar(mapping = aes(x = pred_bin)) +
scale_color_brewer(palette = "Set1")
### your code here
test_df_8_b %>%
ggplot() +
geom_bar(mapping = aes(x = pred_bin)) +
scale_color_brewer(palette = "Set1")
