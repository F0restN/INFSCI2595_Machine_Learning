mutate(log_lik=log_binom_pmf(player_hits, player_atbats, mu)) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
### set the input arguments!
log_binom_pmf <- function(events, trials, prob)
{
log_lik <- lchoose(trials, events) + events * log(prob) + (trials - events) * log()
return(log_lik)
}
tibble::tibble(
mu = seq(0.1,0.6,length.out=101)
) %>%
mutate(log_lik=log_binom_pmf(player_hits, player_atbats, mu)) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
tibble::tibble(
mu = seq(0.1,0.6,length.out=101)
) %>%
mutate(log_lik=log_binom_pmf(player_hits, player_atbats, mu)) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
tibble::tibble(
mu = seq(0.1,0.6,length.out=101)
) %>%
mutate(log_lik=log_binom_pmf(player_hits, player_atbats, mu)) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
### set the input arguments!
log_binom_pmf <- function(events, trials, prob)
{
log_lik <- lchoose(trials, events) + events * log(prob) + (trials - events) * log(1 - prob)
return(log_lik)
}
tibble::tibble(
mu = seq(0.1,0.6,length.out=101)
) %>%
mutate(log_lik=log_binom_pmf(player_hits, player_atbats, mu)) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
### your code here
log_binom_pmf(189,602,0.3)
### your code here
dbinom(189,602,0.3)
### your code here
dbinom(x = 189, size = 602, prob = 0.3, log = TRUE)
### your code here
log_binom_pmf(189, 602, 0.3)
### your code here
dbinom(189,602,0.3)
tibble::tibble(
mu = seq(0.1,0.6,length.out=101)
) %>%
mutate(log_lik=dbinom(player_hits, player_atbats, mu, log = TRUE)) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
coin_probs <- dbinom(x = c[0,1,2,3,4,5], size = 11, prob = 0.25)
coin_probs <- dbinom(x = [0,1,2,3,4,5], size = 11, prob = 0.25)
coin_probs <- dbinom([0,1,2,3,4,5], size = 11, prob = 0.25)
coin_probs <- dbinom(c(0,1,2,3,4,5), size = 11, prob = 0.25)
# print to screen
# length?
coin_probs <- dbinom(c(0,1,2,3,4,5), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
coin_probs <- dbinom(x = c(0,1,2,3,4,5), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
coin_probs <- dbinom(x = c(0:5), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
coin_probs <- dbinom(x = c(0:5), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
length(coin_probs)
coin_probs <- dbinom(x = c(0:8), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
length(coin_probs)
coin_probs <- dbinom(x = c(0:5), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
length(coin_probs)
coin_probs <- dbinom(x = c(0:10), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
length(coin_probs)
coin_probs <- dbinom(x = c(0:9), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
length(coin_probs)
coin_probs <- dbinom(x = c(0:11), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
length(coin_probs)
coin_probs <- dbinom(x = c(0:5), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
length(coin_probs)
### your code here
sum(coin_probs)
coin_probs <- dbinom(x = 0:5, size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
length(coin_probs)
### your code here
sum(coin_probs)
### your code here
pbinom(q = 5, size = 11, prob = 0.25)
### your code here
dbinom(x = c(175:195), size = 602, prob = 0.3) %>% sum()
### your code here
dbinom(x = c(175:195), size = 602, prob = 0.3) %>% sum()
pbinom(q = 195, size = 602, prob = 0.3) - pbinom(q = 175, size = 602, prob = 0.3)
### your code here
dbinom(x = c(175:195), size = 602, prob = 0.3) %>% sum()
pbinom(q = 195, size = 602, prob = 0.3) - pbinom(q = 174, size = 602, prob = 0.3)
### your code here
dbinom(x = c(175:195), size = 602, prob = 0.3) %>% sum()
pbinom(q = 205, size = 602, prob = 0.3) - pbinom(q = 164, size = 602, prob = 0.3)
### your code here
dbinom(x = c(165:205), size = 602, prob = 0.3) %>% sum()
pbinom(q = 205, size = 602, prob = 0.3) - pbinom(q = 164, size = 602, prob = 0.3)
### your code here
dbinom(x = c(175:195), size = 602, prob = 0.3) %>% sum()
pbinom(q = 205, size = 602, prob = 0.3) - pbinom(q = 164, size = 602, prob = 0.3)
### your code here
prob_175_195 <- pbinom(q = 195, size = 602, prob = 0.3) - pbinom(q = 175, size = 602, prob = 0.3)
prob_205_165 <- pbinom(q = 205, size = 602, prob = 0.3) - pbinom(q = 165, size = 602, prob = 0.3)
print(prob_175_195)
print(prob_205_165)
### your code here
dbinom(x = c(175:195), size = 602, prob = 0.3) %>% sum()
pbinom(q = 195, size = 602, prob = 0.3) - pbinom(q = 175, size = 602, prob = 0.3)
### your code here
dbinom(x = c(175:195), size = 602, prob = 0.3) %>% sum()
pbinom(q = 205, size = 602, prob = 0.3) - pbinom(q = 164, size = 602, prob = 0.3)
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(vague_prior = dbeta(mu, a_vague, b_vague)) %>%
ggplot(mapping = aes(x = mu, y = vague_prior)) +
geom_line()
m_small <- 0
N_small <- 7
m_medium <- 9
N_medium <- 100
m_big <- 103
N_big <- 1000
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(vague_prior = dbeta(mu, a_vague, b_vague)) %>%
ggplot(mapping = aes(x = mu, y = vague_prior)) +
geom_line()
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(vague_prior = dbeta(mu, a_vague, b_vague)) %>%
ggplot(mapping = aes(x = mu, y = vague_prior)) +
geom_line()
a_vague <- 1
b_vague <- 1
a_inform <- 4.28
b_inform <- 48.63
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(vague_prior = dbeta(mu, a_vague, b_vague)) %>%
ggplot(mapping = aes(x = mu, y = vague_prior)) +
geom_line()
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(vague_prior = dbeta(mu, a_vague, b_vague)) %>%
ggplot(mapping = aes(x = mu, y = vague_prior)) +
geom_line()
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(inform_prior = dbeta(mu, a_inform, b_inform)) %>%
ggplot(mapping = aes(x = mu, y = inform_prior)) +
geom_line()
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(inform_prior = dbeta(mu, a_inform, b_inform)) %>%
ggplot(mapping = aes(x = mu, y = inform_prior)) +
geom_line()
### your code here
small_vague_a <- m_small + a_vague
small_vague_b <- b_vague - m_small + N_small
small_inform_a <- m_small + a_inform
small_inform_b <- b_inform - m_small + N_small
medium_vague_a <- m_medium + a_vague
medium_vague_b <- b_vague - m_medium + N_medium
medium_inform_a <- m_medium + a_inform
medium_inform_b <- b_inform - m_medium + N_medium
big_vague_a <- m_big + a_vague
big_vague_b <- b_vague - m_big + N_big
big_inform_a <- m_big + a_inform
big_inform_b <- b_inform - m_big + N_big
posterior_table <- tibble::tibble(
a = c(small_vague_a, small_inform_a, medium_vague_a, medium_inform_a, big_vague_a, big_inform_a),
b = c(small_vague_b, small_inform_b, medium_vague_b, medium_inform_b, big_vague_b, big_inform_b)
)
posterior_table
### your code here
small_vague_a <- m_small + a_vague
small_vague_b <- b_vague - m_small + N_small
small_inform_a <- m_small + a_inform
small_inform_b <- b_inform - m_small + N_small
medium_vague_a <- m_medium + a_vague
medium_vague_b <- b_vague - m_medium + N_medium
medium_inform_a <- m_medium + a_inform
medium_inform_b <- b_inform - m_medium + N_medium
big_vague_a <- m_big + a_vague
big_vague_b <- b_vague - m_big + N_big
big_inform_a <- m_big + a_inform
big_inform_b <- b_inform - m_big + N_big
posterior_table <- tibble::tibble(
a = c(small_vague_a, small_inform_a, medium_vague_a, medium_inform_a, big_vague_a, big_inform_a),
b = c(small_vague_b, small_inform_b, medium_vague_b, medium_inform_b, big_vague_b, big_inform_b)
)
posterior_table
### your code here
posterior_m_table <- tibble::tibble(
mean = (posterior_table$a) / (posterior_table$a+posterior_table$b),
mode = (posterior_table$a - 1) / (posterior_table$a + posterior_table$b -2),
quantile_5 = qbeta(0.05, shape1 = posterior_table$a, shape2 = posterior_table$b),
quantile_95 = qbeta(0.95, shape1 = posterior_table$a, shape2 = posterior_table$b)
)
posterior_m_table
### your code here
posterior_m_table <- tibble::tibble(
mean = (posterior_table$a) / (posterior_table$a+posterior_table$b),
mode = (posterior_table$a - 1) / (posterior_table$a + posterior_table$b -2),
quantile_5 = qbeta(0.05, shape1 = posterior_table$a, shape2 = posterior_table$b),
quantile_95 = qbeta(0.95, shape1 = posterior_table$a, shape2 = posterior_table$b)
)
posterior_m_table
### your code here
posterior_m_table <- tibble::tibble(
mean = (posterior_table$a) / (posterior_table$a+posterior_table$b),
mode = (posterior_table$a - 1) / (posterior_table$a + posterior_table$b -2),
quantile_5 = qbeta(0.05, shape1 = posterior_table$a, shape2 = posterior_table$b),
quantile_95 = qbeta(0.95, shape1 = posterior_table$a, shape2 = posterior_table$b)
)
posterior_m_table
bind_cols(posterior_table, posterior_m_table)
m_small <- 0
N_small <- 7
m_medium <- 9
N_medium <- 100
m_big <- 103
N_big <- 1000
a_vague <- 1
b_vague <- 1
a_inform <- 4.28
b_inform <- 48.63
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(vague_prior = dbeta(mu, a_vague, b_vague)) %>%
ggplot(mapping = aes(x = mu, y = vague_prior)) +
geom_line()
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(vague_prior = dbeta(mu, a_vague, b_vague)) %>%
ggplot(mapping = aes(x = mu, y = vague_prior)) +
geom_line()
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(inform_prior = dbeta(mu, a_inform, b_inform)) %>%
ggplot(mapping = aes(x = mu, y = inform_prior)) +
geom_line()
m_small <- 0
N_small <- 7
m_medium <- 9
N_medium <- 100
m_big <- 103
N_big <- 1000
a_vague <- 1
b_vague <- 1
a_inform <- 4.28
b_inform <- 48.63
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(vague_prior = dbeta(mu, a_vague, b_vague)) %>%
ggplot(mapping = aes(x = mu, y = vague_prior)) +
geom_line()
tibble::tibble(
mu = seq(0.1,0.6, length.out = 101)
) %>%
mutate(log_lik = log(mu ^ player_hits * (1 - mu)^(player_atbats - player_hits))) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
tibble
a <- tibble::tibble(
mu = seq(0.1,0.6, length.out = 101)
) %>%
mutate(log_lik = log(mu ^ player_hits * (1 - mu)^(player_atbats - player_hits)))
#ggplot(mapping= aes(x = mu, y = log_lik)) +
#geom_line() +
#geom_vline(xintercept = player_mle)
a
tibble::tibble(
mu = seq(0.1,0.6, length.out = 101)
) %>%
mutate(log_lik = log(mu ^ player_hits * (1 - mu)^(player_atbats - player_hits))) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
knitr::opts_chunk$set(echo = TRUE)
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(inform_prior = dbeta(mu, a_inform, b_inform)) %>%
ggplot(mapping = aes(x = mu, y = inform_prior)) +
geom_line()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
player_hits <- 189
player_atbats <- 602
### your code here
player_mle = player_hits / player_atbats
player_mle
tibble::tibble(
mu = seq(0.1,0.6, length.out = 101)
) %>%
mutate(log_lik = log(mu ^ player_hits * (1 - mu)^(player_atbats - player_hits))) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
### set the input arguments !!!
log_binom_pmf_unnorm <- function(events, trials, prob)
{
log_lik = log(prob^events * (1-prob) ^ (trials - events))
return (log_lik)
}
#log_binom_pmf_unnorm(player_hits, player_atbats, mu)
### set the input arguments!
log_binom_pmf <- function(events, trials, prob)
{
log_lik <- lchoose(trials, events) + events * log(prob) + (trials - events) * log(1 - prob)
return(log_lik)
}
### your code here
log_binom_pmf(189,602,0.3)
### your code here
dbinom(189,602,0.3)
coin_probs <- dbinom(x = c(0:5), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
length(coin_probs)
### your code here
sum(coin_probs)
### your code here
pbinom(q = 5, size = 11, prob = 0.25)
### your code here
dbinom(x = c(175:195), size = 602, prob = 0.3) %>% sum()
pbinom(q = 205, size = 602, prob = 0.3) - pbinom(q = 164, size = 602, prob = 0.3)
m_small <- 0
N_small <- 7
m_medium <- 9
N_medium <- 100
m_big <- 103
N_big <- 1000
a_vague <- 1
b_vague <- 1
a_inform <- 4.28
b_inform <- 48.63
### your code here
small_vague_a <- m_small + a_vague
small_vague_b <- b_vague - m_small + N_small
small_inform_a <- m_small + a_inform
small_inform_b <- b_inform - m_small + N_small
medium_vague_a <- m_medium + a_vague
medium_vague_b <- b_vague - m_medium + N_medium
medium_inform_a <- m_medium + a_inform
medium_inform_b <- b_inform - m_medium + N_medium
big_vague_a <- m_big + a_vague
big_vague_b <- b_vague - m_big + N_big
big_inform_a <- m_big + a_inform
big_inform_b <- b_inform - m_big + N_big
posterior_table <- tibble::tibble(
a = c(small_vague_a, small_inform_a, medium_vague_a, medium_inform_a, big_vague_a, big_inform_a),
b = c(small_vague_b, small_inform_b, medium_vague_b, medium_inform_b, big_vague_b, big_inform_b)
)
posterior_table
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(inform_prior = dbeta(mu, a_inform, b_inform)) %>%
ggplot(mapping = aes(x = mu, y = inform_prior)) +
geom_line()
tibble::tibble(
mu = seq(0, 1, length.out = 101)
) %>%
mutate(vague_prior = dbeta(mu, a_vague, b_vague)) %>%
ggplot(mapping = aes(x = mu, y = vague_prior)) +
geom_line()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
player_hits <- 189
player_atbats <- 602
### your code here
player_mle = player_hits / player_atbats
player_mle
tibble::tibble(
mu = seq(0.1,0.6, length.out = 101)
) %>%
mutate(log_lik = log(mu ^ player_hits * (1 - mu)^(player_atbats - player_hits))) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
### set the input arguments !!!
log_binom_pmf_unnorm <- function(events, trials, prob)
{
log_lik = log(prob^events * (1-prob) ^ (trials - events))
return (log_lik)
}
#log_binom_pmf_unnorm(player_hits, player_atbats, mu)
### set the input arguments!
log_binom_pmf <- function(events, trials, prob)
{
log_lik <- lchoose(trials, events) + events * log(prob) + (trials - events) * log(1 - prob)
return(log_lik)
}
### your code here
log_binom_pmf(189,602,0.3)
### your code here
dbinom(189,602,0.3)
coin_probs <- dbinom(x = c(0:5), size = 11, prob = 0.25)
# print to screen
print(coin_probs)
# length?
length(coin_probs)
### your code here
sum(coin_probs)
### your code here
pbinom(q = 5, size = 11, prob = 0.25)
### your code here
dbinom(x = c(175:195), size = 602, prob = 0.3) %>% sum()
pbinom(q = 205, size = 602, prob = 0.3) - pbinom(q = 164, size = 602, prob = 0.3)
m_small <- 0
N_small <- 7
m_medium <- 9
N_medium <- 100
m_big <- 103
N_big <- 1000
a_vague <- 1
b_vague <- 1
a_inform <- 4.28
b_inform <- 48.63
knitr::opts_chunk$set(echo = TRUE)
tibble::tibble(
mu = seq(0.1,0.6,length.out=101)
) %>%
mutate(log_lik=log_binom_pmf_unnorm(player_hits, player_atbats, mu)) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
player_hits <- 189
player_atbats <- 602
### your code here
player_mle = player_hits / player_atbats
player_mle
tibble::tibble(
mu = seq(0.1,0.6, length.out = 101)
) %>%
mutate(log_lik = log(mu ^ player_hits * (1 - mu)^(player_atbats - player_hits))) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
### set the input arguments !!!
log_binom_pmf_unnorm <- function(events, trials, prob)
{
log_lik = log(prob^events * (1-prob) ^ (trials - events))
return (log_lik)
}
#log_binom_pmf_unnorm(player_hits, player_atbats, mu)
tibble::tibble(
mu = seq(0.1,0.6,length.out=101)
) %>%
mutate(log_lik=log_binom_pmf_unnorm(player_hits, player_atbats, mu)) %>%
ggplot(mapping= aes(x = mu, y = log_lik)) +
geom_line() +
geom_vline(xintercept = player_mle)
