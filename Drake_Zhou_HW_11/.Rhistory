geom_abline(slope = 1, intercept = 0, linetype = 'dotted') +
coord_equal() +
facet_wrap(~mtry, labeller = "label_both") +
theme_bw() +
theme(legend.position = "top")
### variable importance rankings, check when variables are the most
### important
plot(varImp(fit_rf_ion_roc))
### use a boosted tree classifer with GBM, continue to maximize the
### AUC and use the default tuning grid
set.seed(4321)
fit_gbm_ion_roc <- train(Class ~ .,
data = my_ion,
method = "gbm",
metric = "ROC",
trControl = ctrl_k05_roc)
fit_xgboost_ion_roc <- train(Class ~ .,
data = my_ion,
method = "xgbTree",
metric = "ROC",
trControl = ctrl_k05_roc)
fit_xgb_sonar$bestTune
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
data("Sonar", package = 'mlbench')
Sonar %>% dim()
lf_sonar <- Sonar %>%
tibble::rowid_to_column("obs_id") %>%
pivot_longer(!c("obs_id", "Class")) %>%
mutate(input_id = as.numeric(stringr::str_extract(name, "\\d+")))
lf_sonar %>% glimpse()
###
lf_sonar %>%
ggplot(mapping = aes(x = input_id, y = value, group = input_id))+
geom_boxplot()
lf_sonar %>%
ggplot(mapping = aes(x = value))+
geom_freqpoly(mapping = aes(group = input_id), bins = 21)+
facet_wrap(vars(cut(input_id, breaks=seq(1, 60, length.out = 12), include.lowest = TRUE)),
scales = 'free_y')
Sonar %>%
dplyr::select(-Class) %>%
cor() %>%
corrplot::corrplot(method = "square", order = "hclust", hclust.method = 'ward.D2')
Sonar %>%
ggplot(mapping = aes(x = Class))+
geom_bar()
ctrl_k05_roc <- trainControl(method = 'cv',
number = 5,
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
metric_sonar <- "ROC"
set.seed(4321)
fit_glm_sonar <- train(Class ~ (.),
data = Sonar,
method = "glm",
metric = metric_sonar,
preProcess = c("center", "scale"),
trControl = ctrl_k05_roc)
fit_glm_sonar
set.seed(4321)
fit_glmnet_sonar <- train(Class ~ .,
data = Sonar,
method = "glmnet",
metric = metric_sonar,
preProcess = c("center", "scale"),
trControl = ctrl_k05_roc)
fit_glmnet_sonar
set.seed(4321)
fit_nnet_sonar <- train(Class ~ .,
data = Sonar,
method = 'nnet',
metric = metric_sonar,
preProcess = c("center", "scale"),
trControl = ctrl_k05_roc,
trace = FALSE)
fit_nnet_sonar
###
plot(varImp(fit_nnet_sonar))
###
plot(varImp(fit_nnet_sonar), top = 20)
make_test_input_list <- function(var_name, top_4_inputs, all_data)
{
xvar <- all_data %>% select(var_name) %>% pull()
if (var_name %in% top_4_inputs[1:2]){
# use 25 unique values between the min/max values
xgrid <- seq(min(xvar), max(xvar), length.out = 25)
} else if (var_name %in% top_4_inputs[3:4]){
# specify quantiles to use
xgrid <- quantile(xvar, probs = c(0.05, 0.25, 0.5, 0.75, 0.95), na.rm = TRUE)
xgrid <- as.vector(xgrid)
} else {
# set to their median values
xgrid <- median(xvar, na.rm = TRUE)
}
return(xgrid)
}
make_test_input_grid <- function(all_input_names, top_4_inputs, all_data)
{
test_list <- purrr::map(all_input_names,
make_test_input_list,
top_4_inputs = top_4_inputs,
all_data = all_data)
expand.grid(test_list,
KEEP.OUT.ATTRS = FALSE,
stringsAsFactors = FALSE) %>%
purrr::set_names(all_input_names)
}
### Initialize parameters
my_input_name <- colnames(Sonar)[-61]
my_top_ranked_inputs <- c("V50","V57","V31","V22")
### Excecute function
viz_input_grid <- make_test_input_grid(my_input_name, my_top_ranked_inputs, Sonar)
### Display result
dim(viz_input_grid)
pred_class_nnet <- predict(fit_nnet_sonar, viz_input_grid)
typeof(pred_class_nnet)
head(pred_class_nnet)
###
viz_input_grid %>%
mutate(pred_class = pred_class_nnet) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = pred_class))+
facet_grid(cols = vars(V22), rows = vars(V31))+
scale_fill_brewer(palette = 'Set1')
###
pred_class_enet <- predict(fit_glmnet_sonar, viz_input_grid)
viz_input_grid %>%
mutate(pred_class = pred_class_enet) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = pred_class))+
facet_grid(cols = vars(V22), rows = vars(V31))+
scale_fill_brewer(palette = 'Set1')
pred_prob_nnet <- predict(fit_nnet_sonar, viz_input_grid, type = 'prob')
typeof(pred_prob_nnet)
head(pred_prob_nnet)
viz_input_grid %>%
bind_cols(pred_prob_nnet) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = M))+
facet_grid(rows = vars(V31), cols = vars(V22))+
scale_fill_gradient2(limits = c(0,1),
low = 'blue',
high = 'red',
mid = 'white',
midpoint = 0.5)
set.seed(4321)
fit_rf_sonar <- train(Class ~ .,
data = Sonar,
method = "rf",
metric = metric_sonar,
trControl = ctrl_k05_roc,
importance = TRUE)
fit_rf_sonar
set.seed(4321)
fit_xgb_sonar <- train(Class ~.,
data = Sonar,
method = "xgbTree",
metric = metric_sonar,
trControl = ctrl_k05_roc)
fit_xgb_sonar$bestTune
plot(fit_xgb_sonar)
###
plot(varImp(fit_rf_sonar), top = 20)
###
plot(varImp(fit_xgb_sonar), top = 20)
View(make_test_input_grid)
viz_input_grid_rf <- make_test_input_grid(colnames(Sonar)[-61],
c("V11","V12","V9","V10"))
viz_input_grid_rf <- make_test_input_grid(colnames(Sonar)[-61],
c("V11","V12","V9","V10"),
Sonar)
dim(viz_input_grid_rf)
###
pred_prob_rf_on_nnet_grid <- predict(fit_rf_sonar, viz_input_grid_rf)
###
pred_prob_rf_on_nnet_grid <- predict(fit_rf_sonar, viz_input_grid)
###
pred_prob_rf_on_nnet_grid <- predict(fit_rf_sonar, viz_input_grid)
###
pred_prob_rf_on_rf_grid <- predict(fit_rf_sonar, viz_input_grid_rf)
###
pred_prob_rf_on_nnet_grid <- predict(fit_rf_sonar, viz_input_grid)
###
pred_prob_rf_on_rf_grid <- predict(fit_rf_sonar, viz_input_grid_rf)
set.seed(4321)
fit_xgb_sonar <- train(Class ~.,
data = Sonar,
method = "xgbTree",
metric = metric_sonar,
trControl = ctrl_k05_roc)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
set.seed(4321)
fit_xgb_sonar <- train(Class ~.,
data = Sonar,
method = "xgbTree",
metric = metric_sonar,
trControl = ctrl_k05_roc)
###
pred_prob_rf_on_nnet_grid <- predict(fit_rf_sonar, viz_input_grid)
###
pred_prob_rf_on_rf_grid <- predict(fit_rf_sonar, viz_input_grid_rf)
###
viz_input_grid %>%
bind_cols(pred_prob_rf_on_nnet_grid) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = M))+
facet_grid(rows = vars(V31), cols = vars(V22))+
scale_fill_gradient2(limits = c(0,1),
low = 'blue',
high = 'red',
mid = 'white',
midpoint = 0.5)
###
pred_prob_rf_on_nnet_grid <- predict(fit_rf_sonar, viz_input_grid)
###
pred_prob_rf_on_nnet_grid <- predict(fit_rf_sonar, viz_input_grid)
pred_prob_rf_on_nnet_grid
###
pred_prob_rf_on_nnet_grid <- predict(fit_rf_sonar, viz_input_grid)
###
pred_prob_rf_on_rf_grid <- predict(fit_rf_sonar, viz_input_grid_rf)
pred_prob_rf_on_rf_grid
###
viz_input_grid %>%
bind_cols(pred_prob_rf_on_nnet_grid)
View(viz_input_grid)
###
pred_prob_rf_on_nnet_grid <- predict(fit_rf_sonar, viz_input_grid, type = 'prob')
###
pred_prob_rf_on_rf_grid <- predict(fit_rf_sonar, viz_input_grid_rf, type = 'prob')
###
pred_prob_rf_on_rf_grid <- predict(fit_rf_sonar, viz_input_grid_rf, type = 'prob')
###
viz_input_grid %>%
bind_cols(pred_prob_rf_on_nnet_grid)
###
viz_input_grid %>%
bind_cols(pred_prob_rf_on_nnet_grid) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = M))+
facet_grid(rows = vars(V31), cols = vars(V22))+
scale_fill_gradient2(limits = c(0,1),
low = 'blue',
high = 'red',
mid = 'white',
midpoint = 0.5)
###
viz_input_grid %>%
bind_cols(pred_prob_rf_on_rf_grid) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = M))+
facet_grid(rows = vars(V31), cols = vars(V22))+
scale_fill_gradient2(limits = c(0,1),
low = 'blue',
high = 'red',
mid = 'white',
midpoint = 0.5)
###
viz_input_grid %>%
bind_cols(pred_prob_rf_on_nnet_grid) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = M))+
facet_grid(rows = vars(V31), cols = vars(V22))+
scale_fill_gradient2(limits = c(0,1),
low = 'blue',
high = 'red',
mid = 'white',
midpoint = 0.5)
sonar_roc_compare <- resamples(list(GLM = fit_glm_sonar,
GLMNET = fit_glmnet_sonar,
NNET = fit_nnet_sonar,
RF = fit_rf_sonar,
XGB = fit_xgb_sonar))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(caret)
data("Sonar", package = 'mlbench')
Sonar %>% dim()
lf_sonar <- Sonar %>%
tibble::rowid_to_column("obs_id") %>%
pivot_longer(!c("obs_id", "Class")) %>%
mutate(input_id = as.numeric(stringr::str_extract(name, "\\d+")))
lf_sonar %>% glimpse()
###
lf_sonar %>%
ggplot(mapping = aes(x = input_id, y = value, group = input_id))+
geom_boxplot()
lf_sonar %>%
ggplot(mapping = aes(x = value))+
geom_freqpoly(mapping = aes(group = input_id), bins = 21)+
facet_wrap(vars(cut(input_id, breaks=seq(1, 60, length.out = 12), include.lowest = TRUE)),
scales = 'free_y')
Sonar %>%
dplyr::select(-Class) %>%
cor() %>%
corrplot::corrplot(method = "square", order = "hclust", hclust.method = 'ward.D2')
Sonar %>%
ggplot(mapping = aes(x = Class))+
geom_bar()
ctrl_k05_roc <- trainControl(method = 'cv',
number = 5,
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
metric_sonar <- "ROC"
set.seed(4321)
fit_glm_sonar <- train(Class ~ (.),
data = Sonar,
method = "glm",
metric = metric_sonar,
preProcess = c("center", "scale"),
trControl = ctrl_k05_roc)
fit_glm_sonar
set.seed(4321)
fit_glmnet_sonar <- train(Class ~ .,
data = Sonar,
method = "glmnet",
metric = metric_sonar,
preProcess = c("center", "scale"),
trControl = ctrl_k05_roc)
fit_glmnet_sonar
set.seed(4321)
fit_nnet_sonar <- train(Class ~ .,
data = Sonar,
method = 'nnet',
metric = metric_sonar,
preProcess = c("center", "scale"),
trControl = ctrl_k05_roc,
trace = FALSE)
fit_nnet_sonar
###
plot(varImp(fit_nnet_sonar))
###
plot(varImp(fit_nnet_sonar), top = 20)
make_test_input_list <- function(var_name, top_4_inputs, all_data)
{
xvar <- all_data %>% select(var_name) %>% pull()
if (var_name %in% top_4_inputs[1:2]){
# use 25 unique values between the min/max values
xgrid <- seq(min(xvar), max(xvar), length.out = 25)
} else if (var_name %in% top_4_inputs[3:4]){
# specify quantiles to use
xgrid <- quantile(xvar, probs = c(0.05, 0.25, 0.5, 0.75, 0.95), na.rm = TRUE)
xgrid <- as.vector(xgrid)
} else {
# set to their median values
xgrid <- median(xvar, na.rm = TRUE)
}
return(xgrid)
}
make_test_input_grid <- function(all_input_names, top_4_inputs, all_data)
{
test_list <- purrr::map(all_input_names,
make_test_input_list,
top_4_inputs = top_4_inputs,
all_data = all_data)
expand.grid(test_list,
KEEP.OUT.ATTRS = FALSE,
stringsAsFactors = FALSE) %>%
purrr::set_names(all_input_names)
}
### Initialize parameters
my_input_name <- colnames(Sonar)[-61]
my_top_ranked_inputs <- c("V50","V57","V31","V22")
### Excecute function
viz_input_grid <- make_test_input_grid(my_input_name, my_top_ranked_inputs, Sonar)
### Display result
dim(viz_input_grid)
pred_class_nnet <- predict(fit_nnet_sonar, viz_input_grid)
typeof(pred_class_nnet)
head(pred_class_nnet)
###
viz_input_grid %>%
mutate(pred_class = pred_class_nnet) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = pred_class))+
facet_grid(cols = vars(V22), rows = vars(V31))+
scale_fill_brewer(palette = 'Set1')
###
pred_class_enet <- predict(fit_glmnet_sonar, viz_input_grid)
viz_input_grid %>%
mutate(pred_class = pred_class_enet) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = pred_class))+
facet_grid(cols = vars(V22), rows = vars(V31))+
scale_fill_brewer(palette = 'Set1')
pred_prob_nnet <- predict(fit_nnet_sonar, viz_input_grid, type = 'prob')
typeof(pred_prob_nnet)
head(pred_prob_nnet)
viz_input_grid %>%
bind_cols(pred_prob_nnet) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = M))+
facet_grid(rows = vars(V31), cols = vars(V22))+
scale_fill_gradient2(limits = c(0,1),
low = 'blue',
high = 'red',
mid = 'white',
midpoint = 0.5)
set.seed(4321)
fit_rf_sonar <- train(Class ~ .,
data = Sonar,
method = "rf",
metric = metric_sonar,
trControl = ctrl_k05_roc,
importance = TRUE)
fit_rf_sonar
set.seed(4321)
fit_xgb_sonar <- train(Class ~.,
data = Sonar,
method = "xgbTree",
metric = metric_sonar,
trControl = ctrl_k05_roc)
fit_xgb_sonar$bestTune
plot(fit_xgb_sonar)
###
plot(varImp(fit_rf_sonar), top = 20)
###
plot(varImp(fit_xgb_sonar), top = 20)
viz_input_grid_rf <- make_test_input_grid(colnames(Sonar)[-61],
c("V11","V12","V9","V10"),
Sonar)
dim(viz_input_grid_rf)
###
pred_prob_rf_on_nnet_grid <- predict(fit_rf_sonar, viz_input_grid, type = 'prob')
###
pred_prob_rf_on_rf_grid <- predict(fit_rf_sonar, viz_input_grid_rf, type = 'prob')
###
viz_input_grid %>%
bind_cols(pred_prob_rf_on_nnet_grid) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = M))+
facet_grid(rows = vars(V31), cols = vars(V22))+
scale_fill_gradient2(limits = c(0,1),
low = 'blue',
high = 'red',
mid = 'white',
midpoint = 0.5)
###
viz_input_grid %>%
bind_cols(pred_prob_rf_on_rf_grid) %>%
ggplot(mapping = aes(x = V50, y = V57))+
geom_raster(mapping = aes(fill = M))+
facet_grid(rows = vars(V31), cols = vars(V22))+
scale_fill_gradient2(limits = c(0,1),
low = 'blue',
high = 'red',
mid = 'white',
midpoint = 0.5)
sonar_roc_compare <- resamples(list(GLM = fit_glm_sonar,
GLMNET = fit_glmnet_sonar,
NNET = fit_nnet_sonar,
RF = fit_rf_sonar,
XGB = fit_xgb_sonar))
dotplot(sonar_roc_compare)
model_pred_results <- fit_rf_sonar$pred %>% tibble::as_tibble() %>%
filter(mtry == fit_rf_sonar$bestTune$mtry) %>%
select(pred, obs, M, R, rowIndex, Resample) %>%
mutate(model_name = "RF") %>%
bind_rows(fit_glm_sonar$pred %>% tibble::as_tibble() %>%
select(pred, obs, M, R, rowIndex, Resample) %>%
mutate(model_name = "GLM")) %>%
bind_rows(fit_glmnet_sonar$pred %>% tibble::as_tibble() %>%
filter(alpha == fit_glmnet_sonar$bestTune$alpha,
lambda == fit_glmnet_sonar$bestTune$lambda) %>%
select(pred, obs, M, R, rowIndex, Resample) %>%
mutate(model_name = "GLMNET")) %>%
bind_rows(fit_nnet_sonar$pred %>% tibble::as_tibble() %>%
filter(size == fit_nnet_sonar$bestTune$size,
decay == fit_nnet_sonar$bestTune$decay) %>%
select(pred, obs, M, R, rowIndex, Resample) %>%
mutate(model_name = "NNET"))
model_pred_results %>% head()
library(yardstick)
model_pred_results %>%
group_by(model_name) %>%
roc_curve(obs, M) %>%
autoplot()
model_pred_results %>%
group_by(model_name,Resample) %>%
roc_curve(obs, M) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity))+
geom_path(aes(color = Resample)) +
geom_abline(slope = 1, intercept = 0, linetype = 'dotted') +
coord_equal() +
facet_wrap(~model_name)
model_pred_results %>%
group_by(model_name,Resample) %>%
roc_curve(obs, M) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity))+
geom_path(aes(color = Resample)) +
geom_abline(slope = 1, intercept = 0, linetype = 'dotted') +
coord_equal() +
facet_wrap( ~ model_name)
pred_prob_nnet <- predict(fit_nnet_sonar, viz_input_grid, type = 'prob')
typeof(pred_prob_nnet)
head(pred_prob_nnet)
pred_class_nnet$M
pred_prob_nnet <- predict(fit_nnet_sonar, viz_input_grid, type = 'prob')
typeof(pred_prob_nnet)
head(pred_prob_nnet)
pred_prob_nnet$M
pred_prob_nnet <- predict(fit_nnet_sonar, viz_input_grid, type = 'prob')
typeof(pred_prob_nnet)
head(pred_prob_nnet)
pred_prob_nnet$M
pred_prob_nnet <- predict(fit_nnet_sonar, viz_input_grid, type = 'prob')
typeof(pred_prob_nnet)
head(pred_prob_nnet)
