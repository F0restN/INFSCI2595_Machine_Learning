?qnorm
knitr::opts_chunk$set(echo = TRUE)
qnorm(25, mean = 125, sd = 5)
qnorm(25, mean = 125, sd = 5, graph=TRUE)
qnorm(25, mean = 125, sd = 5)
qnorm(0.25, mean = 125, sd = 5)
qnorm(0.25, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
qnorm(0.25, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
qnorm(25, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
qnorm(0.25, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
dnorm(0.25, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
pnorm(0.25, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
qnorm(0.25, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
pnorm(0.25, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
pnorm(25, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
qnorm(0.25, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
qnorm(0.25, mean = 125, sd = 5) - qnorm(0.75, mean = 125, sd = 5)
qnorm(0.75, mean = 125, sd = 5)
qnorm(0.25, mean = 125, sd = 5)
q3 = qnorm(0.75, mean = 125, sd = 5)
q1 = qnorm(0.25, mean = 125, sd = 5)
q3 = qnorm(0.75, mean = 125, sd = 5)
q1 = qnorm(0.25, mean = 125, sd = 5)
q3
q1
q3-q1
pnorm(117, mean = 125, sd = 5)
q3 = qnorm(0.75, mean = 125, sd = 5)
q1 = qnorm(0.25, mean = 125, sd = 5)
pnorm(q3, mean = 125, sd=5)
#Output
q3
q1
q3-q1
q3 = qnorm(0.75, mean = 125, sd = 5)
q1 = qnorm(0.25, mean = 125, sd = 5)
#Output
q3
q1
q3-q1
q3 = qnorm(0.75, mean = 125, sd = 5)
q1 = qnorm(0.25, mean = 125, sd = 5)
#Output
q3
q1
q3-q1
pnorm(117, mean = 125, sd = 5)
trials_req(5, 2, 5)
trials_req = function(t0, tN, sig) {
return ( sig^2 * (t0^2 - tN^2) / tN^2 * t0^2 )
}
trials_req(5, 2, 5)
trials_req = function(t0, tN, sig) {
return ( sig^2 * (t0^2 - tN^2) / (tN^2 * t0^2) )
}
trials_req(5, 2, 5)
trials_req(5, 2, 5)
trials_req(5, 0.5, 5)
trials_req(5, 2, 5)
trials_req(5, 0.5, 5)
trials <- 15^2 / 3^2
trials <- 15^2 / 3^2
trials
knitr::opts_chunk$set(echo = TRUE)
N_tau_3 = (15^2) / (3^2)
print(N_tau_3)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
q3 = qnorm(0.75, mean = 125, sd = 5)
q1 = qnorm(0.25, mean = 125, sd = 5)
#Output
q3
q1
q3-q1
pnorm(117, mean = 125, sd = 5)
trials_req = function(t0, tN, sig) {
return ( sig^2 * (t0^2 - tN^2) / (tN^2 * t0^2) )
}
trials_req(5, 2, 5)
trials_req(5, 0.5, 5)
trials <- 15^2 / 3^2
trials
N <- 21
v <- 4.2
### set input arguments !!!
log_post_sigma_unnorm <- function(sigma, N, v, lambda)
{
return(N * log(1 / sigma) - (N * v) / (2 * sigma^2) - lambda * sigma)
}
tibble::tibble(
sigma = seq(0.5, 4.5, length.out=101)
) %>%
mutate(log_post = log_post_sigma_unnorm(sigma = sigma, N = N, v = v, lambda = 0.75))
tab_sig_logpost  = tibble::tibble(
sigma = seq(0.5, 4.5, length.out=101)
) %>%
mutate(log_post = log_post_sigma_unnorm(sigma = sigma, N = N, v = v, lambda = 0.75))
tibble::tibble(
sigma = seq(0.5, 4.5, length.out=101)
) %>%
mutate(log_post = log_post_sigma_unnorm(sigma = sigma, N = N, v = v, lambda = 0.75)) %>%
ggplot(mapping = aes(x = sigma, y = log_post)) +
geom_line()
knitr::opts_chunk$set(echo = TRUE)
tibble::tibble(
sigma = seq(from = 0.5, to = 4.5, length.out = 101)
) %>%
mutate(log_post = log_post_sigma_unnorm(sigma, N, v, 0.75)) %>%
ggplot(mapping = aes(x = sigma, y = log_post)) +
geom_line()
### set the input arguments !!!
log_post_varphi_unnorm <- function(varphi, N, v, lambda)
{
sigma <- exp(varphi)
log_post <- log_post_sigma_unnorm(sigma, N, v, lambda)
return(log_post + varphi)
}
tibble::tibble(
varphi = seq(0.5, 4.5, length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi = varphi, N = N, v = v, lambda = 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()
### set the input arguments !!!
log_post_varphi_unnorm <- function(varphi, N, v, lambda)
{
# back-calculate sigma given varphi
sigma <- exp(varphi)
# calculate the unnormalized log-posterior on sigma
log_post <- log_post_sigma_unnorm(sigma, N, v, lambda)
# account for the derivative adjustment
derivative_adj = log_post + varphi
return(derivative_adj)
}
tibble::tibble(
varphi = seq(from = log(0.5), to = log(4.5), length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi, N, v, 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()
tibble::tibble(
varphi = seq(0.5, 4.5, length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi = varphi, N = N, v = v, lambda = 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()
### set the input arguments !!!
log_post_varphi_unnorm <- function(varphi, N, v, lambda)
{
sigma <- exp(varphi)
log_post <- log_post_sigma_unnorm(sigma, N, v, lambda)
return(log_post + varphi)
}
tibble::tibble(
varphi = seq(0.5, 4.5, length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi = varphi, N = N, v = v, lambda = 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()
### set the input arguments !!!
log_post_varphi_unnorm <- function(varphi, N, v, lambda)
{
sigma <- exp(varphi)
log_post <- log_post_sigma_unnorm(sigma, N, v, lambda)
derivative_adj = log_post + varphi
return(derivative_adj)
}
tibble::tibble(
varphi = seq(0.5, 4.5, length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi = varphi, N = N, v = v, lambda = 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()
tibble::tibble(
varphi = seq(from = log(0.5), to = log(4.5), length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi, N, v, 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()
tibble::tibble(
varphi = seq(from = log(0.5), to = log(4.5), length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi, N, v, 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()
tibble::tibble(
varphi = seq(log(0.5), log(4.5), length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi, N, v, 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()
tibble::tibble(
varphi = seq(from = log(0.5), to = log(4.5), length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi, N, v, 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line() +
geom_vline(xintercept = varphi_opt_b$par, color = "red")
tibble::tibble(
x = seq(-(5 * pi / 8), (9 * pi /8), length.out = 1001)
) %>%
ggplot(mapping = aes(x = x, y = sin(x))) +
geom_line()
tibble::tibble(
x = seq(from = -(5 * pi / 8), to = (9 * pi /8), length.out = 1001)
) %>%
ggplot(mapping = aes(x = x, y = sin(x))) +
geom_line()
?oprim
?optim
optim
opt_sine_01 <- optim(0,
sin(),
gr = NULL,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE,
control = list(fnscale = -1))
opt_sine_01 <- optim(0,
sin,
gr = NULL,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE,
control = list(fnscale = -1))
opt_sine_01 <- optim(0,
sin,
gr = NULL,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE,
control = list(fnscale = -1))
View(opt_sine_01)
opt_sine_02 <- optim(3,
sin,
gr = NULL,
method = "Brent",
lower = - (5 * pi / 8), upper = (9 * pi /8),
hessian = TRUE,
control = list(fnscale = -1))
opt_sine_02
opt_sine_02 <- optim(3,
sin,
gr = NULL,
method = "Brent",
lower = - (5 * pi / 8), upper = (9 * pi /8),
hessian = TRUE,
control = list(fnscale = -1))
print(opt_sine_02)
opt_sine_02 <- optim(3,
sin,
gr = NULL,
method = "Brent",
lower = - (5 * pi / 8), upper = (9 * pi /8),
hessian = TRUE,
control = list(fnscale = -1))
opt_sine_02
opt_sine_02 <- optim(3,
sin,
gr = NULL,
method = "Brent",
lower = - (5 * pi / 8), upper = (9 * pi /8),
hessian = TRUE,
control = list(fnscale = -1))
opt_sine_02
opt_sine_01 <- optim(0,
sin,
gr = NULL,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE,
control = list(fnscale = -1))
opt_sine_01
my_func <- function(x, constants)
{
return(-exp((x - constants$a)^constants$m))
}
my_constants <- list(a = 0.7, m = 2)
my_func <- function(x, constants)
{
return(-exp((x - constants$a)^constants$m))
}
my_constants <- list(a = 0.7, m = 2)
my_func <- function(x, constants)
{
return(-exp((x - constants$a) ^ constants$m))
}
my_constants <- list(a = 0.7, m = 2)
tibble::tibble(
x = seq(-0.5, 2, length.out = 501)
) %>%
ggplot(mapping = aes(x = x, y = my_func(x,my_constants))) +
geom_line()
opt_result <- optim(1.75,
my_func,
gr = NULL,
my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale = -1, maxit = 1001))
opt_result
tibble::tibble(
x = seq(-0.5, 2, length.out = 501)
) %>%
ggplot(mapping = aes(x = x, y = my_func(x,my_constants))) +
geom_line() +
geom_vline(xintercept = opt_result$par, color = "red")
varphi_opt_a <- optim(-0.5,
log_post_varphi_unnorm,
gr = NULL,
N, v, 0.75,
method = "BFGS",
hessian = TRUE,
control = list(fnscale = -1, maxit = 1001))
varphi_opt_a
varphi_opt_b <- optim(1.35,
log_post_varphi_unnorm,
gr = NULL,
N, v, 0.75,
method = "BFGS",
hessian = TRUE,
control = list(fnscale = -1, maxit = 1001))
varphi_opt_b
varphi_opt_b <- optim(1.35,
log_post_varphi_unnorm,
gr = NULL,
N, v, 0.75,
method = "BFGS",
hessian = TRUE,
control = list(fnscale = -1, maxit = 1001))
varphi_opt_b
tibble::tibble(
varphi = seq(log(0.5), log(4.5), length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi, N, v, 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line() +
geom_vline(xintercept = varphi_opt_b$par, color = "red")
tibble::tibble(
varphi = seq(log(0.5), log(4.5), length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi, N, v, 0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line() +
geom_vline(xintercept = varphi_opt_b$par, color = "red")
