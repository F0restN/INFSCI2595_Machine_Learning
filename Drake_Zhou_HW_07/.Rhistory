data <- c(train_02, test_02)
data
###
data <- data.frame(train_set = train_02, test_set = test_02)
###
data <- data.frame(train_set = train_02, test_set = test_02)
data %>%
ggplot(mapping = aes(x = x, y = y))
###
data <- data.frame(train_set = train_02, test_set = test_02)
data
###
data <- data.frame(train_set = train_02, test_set = test_02)
data %>%
ggplot()+
geom_point(mapping = aes(x = train_set.x, y = train_set.y))
###
data <- data.frame(train_set = train_02, test_set = test_02)
data %>%
ggplot()+
geom_point(mapping = aes(x = train_set.x, y = train_set.y, color = 'blue'))
###
data <- data.frame(train_set = train_02, test_set = test_02)
data %>%
ggplot()+
geom_point(mapping = aes(x = train_set.x, y = train_set.y, color = 'blue'))+
geom_point(mapping = aes(x = test_set.x, y = test_set.y, color = 'red'))
###
data <- data.frame(train_set = train_02, test_set = test_02)
data %>%
ggplot()+
geom_point(mapping = aes(x = train_set.x, y = train_set.y, color = 'red'))+
geom_point(mapping = aes(x = test_set.x, y = test_set.y, color = 'blue'))
###
data <- data.frame(train_set = train_02, test_set = test_02)
data %>%
ggplot()+
geom_point(mapping = aes(x = train_set.x, y = train_set.y, color = 'blue'))+
geom_point(mapping = aes(x = test_set.x, y = test_set.y, color = 'red'))
###
data <- data.frame(train_set = train_02, test_set = test_02)
data %>%
ggplot()+
geom_point(mapping = aes(x = train_set.x, y = train_set.y, color = 'Training set'))+
geom_point(mapping = aes(x = test_set.x, y = test_set.y, color = 'Test set'))
###
data.frame(train_set = train_02, test_set = test_02) %>% data %>%
ggplot()+
geom_point(mapping = aes(x = train_set.x, y = train_set.y, color = 'Training set'))+
geom_point(mapping = aes(x = test_set.x, y = test_set.y, color = 'Test set'))
###
data.frame(train_set = train_02, test_set = test_02) %>%
data %>%
ggplot()+
geom_point(mapping = aes(x = train_set.x, y = train_set.y, color = 'Training set'))+
geom_point(mapping = aes(x = test_set.x, y = test_set.y, color = 'Test set'))
###
data <- data.frame(train_set = train_02, test_set = test_02) %>% data
data %>%
ggplot()+
geom_point(mapping = aes(x = train_set.x, y = train_set.y, color = 'Training set'))+
geom_point(mapping = aes(x = test_set.x, y = test_set.y, color = 'Test set'))
###
data <- data.frame(train_set = train_02, test_set = test_02)
data %>%
ggplot()+
geom_point(mapping = aes(x = train_set.x, y = train_set.y, color = 'Training set'))+
geom_point(mapping = aes(x = test_set.x, y = test_set.y, color = 'Test set'))
?splines::ns()
make_spline_basis_mats <- function(J, train_data, test_data)
{
train_basis <- splines::ns(df = J)
knots_use_basis <- as.vector(attributes(train_basis)$knots)
train_matrix <- model.matrix(splines::ns(x = x, knots = knots_use_basis), data = train_data)
test_matrix <- model.matrix(splines::ns(x = x, knots = knots_use_basis), data = test_data)
tibble::tibble(
design_matrix = list(train_matrix),
test_matrix = list(test_matrix)
)
}
make_spline_basis_mats <- function(J, train_data, test_data)
{
train_basis <- splines::ns(x = train$x, df = J)
knots_use_basis <- as.vector(attributes(train_basis)$knots)
train_matrix <- model.matrix(splines::ns(knots = knots_use_basis), data = train_data)
test_matrix <- model.matrix(splines::ns(knots = knots_use_basis), data = test_data)
tibble::tibble(
design_matrix = list(train_matrix),
test_matrix = list(test_matrix)
)
}
make_spline_basis_mats <- function(J, train_data, test_data)
{
train_basis <- splines::ns(x = train$x, df = J)
knots_use_basis <- as.vector(attributes(train_basis)$knots)
train_matrix <- model.matrix(splines::ns(knots = knots_use_basis), data = train_data)
test_matrix <- model.matrix(splines::ns(knots = knots_use_basis), data = test_data)
tibble::tibble(
design_matrix = list(train_matrix),
test_matrix = list(test_matrix)
)
}
spline_matrices <- purrr::map_dfr(seq(1, 50, by = 2),
make_spline_basis_mats,
train_data = train_02,
test_data = test_02)
make_spline_basis_mats <- function(J, train_data, test_data)
{
train_basis <- splines::ns(x = train$x, df = J)
knots_use_basis <- as.vector(attributes(train_basis)$knots)
train_matrix <- model.matrix( ~ splines::ns(knots = knots_use_basis), data = train_data)
test_matrix <- model.matrix( ~ splines::ns(knots = knots_use_basis), data = test_data)
tibble::tibble(
design_matrix = list(train_matrix),
test_matrix = list(test_matrix)
)
}
spline_matrices <- purrr::map_dfr(seq(1, 50, by = 2),
make_spline_basis_mats,
train_data = train_02,
test_data = test_02)
make_spline_basis_mats <- function(J, train_data, test_data)
{
train_basis <- splines::ns(x = train$x, df = J)
knots_use_basis <- as.vector(attributes(train_basis)$knots)
train_matrix <- model.matrix( ~ splines::ns(knots = knots_use_basis), data = train_data)
test_matrix <- model.matrix( ~ splines::ns(knots = knots_use_basis), data = test_data)
tibble::tibble(
design_matrix = list(train_matrix),
test_matrix = list(test_matrix)
)
}
make_spline_basis_mats <- function(J, train_data, test_data)
{
train_basis <- splines::ns(train$x, df = J)
knots_use_basis <- as.vector(attributes(train_basis)$knots)
train_matrix <- model.matrix( ~ splines::ns(knots = knots_use_basis), data = train_data)
test_matrix <- model.matrix( ~ splines::ns(knots = knots_use_basis), data = test_data)
tibble::tibble(
design_matrix = list(train_matrix),
test_matrix = list(test_matrix)
)
}
spline_matrices <- purrr::map_dfr(seq(1, 50, by = 2),
make_spline_basis_mats,
train_data = train_02,
test_data = test_02)
make_spline_basis_mats <- function(J, train_data, test_data)
{
train_basis <- splines::ns(train_data$x, df = J)
knots_use_basis <- as.vector(attributes(train_basis)$knots)
train_matrix <- model.matrix( ~ splines::ns(knots = knots_use_basis), data = train_data)
test_matrix <- model.matrix( ~ splines::ns(knots = knots_use_basis), data = test_data)
tibble::tibble(
design_matrix = list(train_matrix),
test_matrix = list(test_matrix)
)
}
spline_matrices <- purrr::map_dfr(seq(1, 50, by = 2),
make_spline_basis_mats,
train_data = train_02,
test_data = test_02)
make_spline_basis_mats <- function(J, train_data, test_data)
{
train_basis <- splines::ns(train_data$x, df = J)
knots_use_basis <- as.vector(attributes(train_basis)$knots)
train_matrix <- model.matrix( ~ splines::ns(x = x, knots = knots_use_basis), data = train_data)
test_matrix <- model.matrix( ~ splines::ns(x = x, knots = knots_use_basis), data = test_data)
tibble::tibble(
design_matrix = list(train_matrix),
test_matrix = list(test_matrix)
)
}
spline_matrices <- purrr::map_dfr(seq(1, 50, by = 2),
make_spline_basis_mats,
train_data = train_02,
test_data = test_02)
make_spline_basis_mats <- function(J, train_data, test_data)
{
train_basis <- splines::ns(x = train_data$x, df = J)
knots_use_basis <- as.vector(attributes(train_basis)$knots)
train_matrix <- model.matrix( ~ splines::ns(x = x, knots = knots_use_basis), data = train_data)
test_matrix <- model.matrix( ~ splines::ns(x = x, knots = knots_use_basis), data = test_data)
tibble::tibble(
design_matrix = list(train_matrix),
test_matrix = list(test_matrix)
)
}
spline_matrices <- purrr::map_dfr(seq(1, 50, by = 2),
make_spline_basis_mats,
train_data = train_02,
test_data = test_02)
glimpse(spline_matrices)
spline_matrices <- purrr::map_dfr(seq(1, 50, by = 2),
make_spline_basis_mats,
train_data = train_02,
test_data = test_02)
glimpse(spline_matrices)
View(spline_matrices)
spline_matrices
dim(spline_matrices$design_matrix[[1]])
dim(spline_matrices$test_matrix[[1]])
dim(spline_matrices$design_matrix[[2]])
dim(spline_matrices$test_matrix[[2]])
info_02_train <- list(
yobs = train_02$y,
mu_beta = 0,
tau_beta = 20,
sigma_rate = 1
)
View(post_pred_samples_01)
View(lm_logpost)
?rnorm
View(info_01)
View(my_laplace)
my_laplace <- function(start_guess, logpost_func, ...)
{
# code adapted from the `LearnBayes`` function `laplace()`
fit <- optim(start_guess,
logpost_func,
gr = NULL,
...,
method = "BFGS",
hessian = TRUE,
control = list(fnscale = -1, maxit = 1001))
mode <- fit$par
post_var_matrix <- -solve(fit$hessian)
p <- length(mode) # number of unknown parameters
int <- p/2 * log(2 * pi) + 0.5 * log(det(post_var_matrix)) + logpost_func(mode, ...)
# package all of the results into a list
list(mode = mode,
var_matrix = post_var_matrix,
log_evidence = int,
converge = ifelse(fit$convergence == 0,
"YES",
"NO"),
iter_counts = as.numeric(fit$counts[1]))
}
my_laplace <- function(start_guess, logpost_func, ...)
{
# code adapted from the `LearnBayes`` function `laplace()`
fit <- optim(start_guess,
logpost_func,
gr = NULL,
...,
method = "BFGS",
hessian = TRUE,
control = list(fnscale = -1, maxit = 1001))
mode <- fit$par
post_var_matrix <- -solve(fit$hessian)
p <- length(mode) # number of unknown parameters
int <- p/2 * log(2 * pi) + 0.5 * log(det(post_var_matrix)) + logpost_func(mode, ...)
# package all of the results into a list
list(mode = mode,
var_matrix = post_var_matrix,
log_evidence = int,
converge = ifelse(fit$convergence == 0,
"YES",
"NO"),
iter_counts = as.numeric(fit$counts[1]))
}
parameters <- rep(0, ncol(info_01$design_matrix)+1)
laplace_01 <- my_laplace(start_guess, lm_logpost, info_01)
parameters <- rep(0, ncol(info_01$design_matrix)+1)
laplace_01 <- my_laplace(parameters, lm_logpost, info_01)
###Posterior Mode
laplace_01$mode
###Posterior Standard Deviations
sqrt(diag(laplace_01$var_matrix))
init_guess <- rep(0, ncol(info_01$design_matrix)+1)
laplace_01 <- my_laplace(init_guess, lm_logpost, info_01)
###Posterior Mode
laplace_01$mode
###Posterior Standard Deviations
sqrt(diag(laplace_01$var_matrix))
View(my_laplace)
manage_spline_fit <- function(Xtrain, logpost_func, my_settings)
{
my_settings$design_matrix <- Xtrain
init_beta <- rnorm(ncol(Xtrain))
init_varphi <- log(rexp(rate = my_settings$sigma_rate))
my_laplace(init_beta, logpost_func, my_settings)
}
View(lm_logpost)
?rep()
?rep
init_guess <- rep(0, ncol(info_01$design_matrix)+1)
init_guess
laplace_01 <- my_laplace(init_guess, lm_logpost, info_01)
init_guess <- rep(0, ncol(info_01$design_matrix)+1)
laplace_01 <- my_laplace(init_guess, lm_logpost, info_01)
init_guess <- rep(0, ncol(info_01$design_matrix)+1)
init_guess
laplace_01 <- my_laplace(init_guess, lm_logpost, info_01)
init_guess <- rep(0, ncol(info_01$design_matrix)+1)
init_guess
laplace_01 <- my_laplace(init_guess, lm_logpost, info_01)
###Posterior Mode
laplace_01$mode
###Posterior Standard Deviations
sqrt(diag(laplace_01$var_matrix))
manage_spline_fit <- function(Xtrain, logpost_func, my_settings)
{
my_settings$design_matrix <- Xtrain
init_beta <- rnorm(ncol(Xtrain))
init_varphi <- log(rexp(rate = my_settings$sigma_rate))
my_laplace(c(init_beta, init_varphi), logpost_func, my_settings)
}
set.seed(724412)
all_spline_models <- purrr::map(spline_matrices$design_matrix,
manage_spline_fit,
logpost_func = lm_logpost,
my_settings = info_02_train)
manage_spline_fit <- function(Xtrain, logpost_func, my_settings)
{
my_settings$design_matrix <- Xtrain
init_beta <- rnorm(ncol(Xtrain))
init_varphi <- log(rexp(1, rate = my_settings$sigma_rate))
my_laplace(c(init_beta, init_varphi), logpost_func, my_settings)
}
set.seed(724412)
all_spline_models <- purrr::map(spline_matrices$design_matrix,
manage_spline_fit,
logpost_func = lm_logpost,
my_settings = info_02_train)
all_spline_models[[2]]
purrr::map_chr(all_spline_models, "converge")
View(post_lm_pred_samples)
View(lm_logpost)
View(lm_logpost)
View(make_post_lm_pred)
calc_mae_from_laplace <- function(mvn_result, Xtrain, Xtest, y_train, y_test, num_samples)
{
# generate posterior samples from the approximate MVN posterior
post <- generate_lm_post_samples(mvn_result = mvn_result, length_beta = ncol(Xtrain), )
# make posterior predictions on the training set
pred_train <- make_post_lm_pred(Xtrain, post)
# make posterior predictions on the test set
pred_test <- make_post_lm_pred(Xtest, post)
# calculate the error between the training set predictions
# and the training set observations
error_train <- pred_train$Umat - train_02$y
# calculate the error between the test set predictions
# and the test set observations
error_test <- pred_test$Umat - test_02$y
# calculate the MAE on the training set
mae_train <- mean(abs(error_train))
# calculate the MAE on the test set
mae_test <- mean(abs(error_test))
# book keeping, package together the results
mae_train_df <- tibble::tibble(
mae = mae_train
) %>%
mutate(dataset = "training") %>%
tibble::rowid_to_column("post_id")
mae_test_df <- tibble::tibble(
mae = mae_test
) %>%
mutate(dataset = "test") %>%
tibble::rowid_to_column("post_id")
# you must specify the order, J, associated with the spline model
mae_train_df %>%
bind_rows(mae_test_df) %>%
mutate(J = ncol(Xtrain) - 1)
}
set.seed(52133)
all_spline_mae_results <- purrr::pmap_dfr(list(all_spline_models,
spline_matrices$design_matrix,
spline_matrices$test_matrix),
calc_mae_from_laplace,
y_train = train_02$y,
y_test = test_02$y,
num_samples = 2500)
calc_mae_from_laplace <- function(mvn_result, Xtrain, Xtest, y_train, y_test, num_samples)
{
# generate posterior samples from the approximate MVN posterior
post <- generate_lm_post_samples(mvn_result = mvn_result, length_beta = ncol(Xtrain), num_samples)
# make posterior predictions on the training set
pred_train <- make_post_lm_pred(Xtrain, post)
# make posterior predictions on the test set
pred_test <- make_post_lm_pred(Xtest, post)
# calculate the error between the training set predictions
# and the training set observations
error_train <- pred_train$Umat - train_02$y
# calculate the error between the test set predictions
# and the test set observations
error_test <- pred_test$Umat - test_02$y
# calculate the MAE on the training set
mae_train <- mean(abs(error_train))
# calculate the MAE on the test set
mae_test <- mean(abs(error_test))
# book keeping, package together the results
mae_train_df <- tibble::tibble(
mae = mae_train
) %>%
mutate(dataset = "training") %>%
tibble::rowid_to_column("post_id")
mae_test_df <- tibble::tibble(
mae = mae_test
) %>%
mutate(dataset = "test") %>%
tibble::rowid_to_column("post_id")
# you must specify the order, J, associated with the spline model
mae_train_df %>%
bind_rows(mae_test_df) %>%
mutate(J = ncol(Xtrain) - 1)
}
set.seed(52133)
all_spline_mae_results <- purrr::pmap_dfr(list(all_spline_models,
spline_matrices$design_matrix,
spline_matrices$test_matrix),
calc_mae_from_laplace,
y_train = train_02$y,
y_test = test_02$y,
num_samples = 2500)
set.seed(52133)
all_spline_mae_results <- purrr::pmap_dfr(list(all_spline_models,
spline_matrices$design_matrix,
spline_matrices$test_matrix),
calc_mae_from_laplace,
y_train = train_02$y,
y_test = test_02$y,
num_samples = 2500)
set.seed(52133)
all_spline_mae_results <- purrr::pmap_dfr(list(all_spline_models,
spline_matrices$design_matrix,
spline_matrices$test_matrix),
calc_mae_from_laplace,
y_train = train_02$y,
y_test = test_02$y,
num_samples = 2500)
all_spline_mae_results
set.seed(52133)
all_spline_mae_results <- purrr::pmap_dfr(list(all_spline_models,
spline_matrices$design_matrix,
spline_matrices$test_matrix),
calc_mae_from_laplace,
y_train = train_02$y,
y_test = test_02$y,
num_samples = 2500)
glimpse(all_spline_mae_results)
###
all_spline_mae_results %>%
ggplot(mapping = aes(x = as.factor(J), y = mae))+
geom_boxplot(mapping = aes(fill = dataset))+
scale_fill_brewer(palette = "Set1")
calc_mae_from_laplace <- function(mvn_result, Xtrain, Xtest, y_train, y_test, num_samples)
{
# generate posterior samples from the approximate MVN posterior
post <- generate_lm_post_samples(mvn_result = mvn_result, length_beta = ncol(Xtrain), num_samples = num_samples)
# make posterior predictions on the training set
pred_train <- make_post_lm_pred(Xtrain, post)
# make posterior predictions on the test set
pred_test <- make_post_lm_pred(Xtest, post)
# calculate the error between the training set predictions
# and the training set observations
error_train <- pred_train$Umat - y_train
# calculate the error between the test set predictions
# and the test set observations
error_test <- pred_test$Umat - y_test
# calculate the MAE on the training set
mae_train <- colMeans(abs(error_train))
# calculate the MAE on the test set
mae_test <- colMeans(abs(error_test))
# book keeping, package together the results
mae_train_df <- tibble::tibble(
mae = mae_train
) %>%
mutate(dataset = "training") %>%
tibble::rowid_to_column("post_id")
mae_test_df <- tibble::tibble(
mae = mae_test
) %>%
mutate(dataset = "test") %>%
tibble::rowid_to_column("post_id")
# you must specify the order, J, associated with the spline model
mae_train_df %>%
bind_rows(mae_test_df) %>%
mutate(J = ncol(Xtrain) - 1)
}
set.seed(52133)
all_spline_mae_results <- purrr::pmap_dfr(list(all_spline_models,
spline_matrices$design_matrix,
spline_matrices$test_matrix),
calc_mae_from_laplace,
y_train = train_02$y,
y_test = test_02$y,
num_samples = 2500)
###
all_spline_mae_results %>%
ggplot(mapping = aes(x = as.factor(J), y = mae))+
geom_boxplot(mapping = aes(fill = dataset))+
scale_fill_brewer(palette = "Set1")
###
all_spline_mae_results %>% filter(J > 3)
ggplot(mapping = aes(x = J, y = mae))+
stat_summary(geom = 'line', fun = 'median')+
facet_wrap(~dataset)
###
all_spline_mae_results %>% filter(J > 3) %>%
ggplot(mapping = aes(x = J, y = mae))+
stat_summary(geom = 'line', fun = 'median')+
facet_wrap(~dataset)
spline_evidence <- purrr::map_dbl(all_spline_models, "log_evidence")
spline_weights <- exp(spline_evidence) / sum(exp(spline_evidence))
spline_dof <- seq(1, 50, by = 2)
tibble::tibble(
w = spline_weights
) %>%
mutate(J = spline_dof) %>%
ggplot(mapping = aes(x = as.factor(J), y = w))+
geom_bar(stat = "identity")
